           18. РАБОТАЕМ C ОКНАМИ. ОКНА РЕДАКТИРОВАНИЯ

    Для создания интерфейса пользователя в FOXPRO используют генератор
экранов и получают .SQR-файл с соответствующими "оконными" командами.
Программисту полезно знать их хотя бы для того, чтобы вносить
изменения, и безусловно необходимо умение управлять окнами.
Непритязательному пользователю следует, как минимум, изучить пп.
18.1, 18.2, а прочий материал главы использовать как справочный.
В п. 18.1 оконные команды даны в краткой форме и лишь с целью
демонстрации основных принципов. Номера строк мы обозначаем
Y1, Y2 и т.д., а номера столбцов - X1, X2 и т.д. Отсчет этих
экранных координат начинается с 0.

           18.1. Знакомимся с исходными понятиями

    Окно представляет собой обрамленную прямоугольную область 
экрана с именем. Имеется системный стандарт оформления окна
(указывают атрибутом SYSTEM в определении окна). В развитом 
интерфейсе сложных приложений используют множество окон. Например, 
представляют документ (бланк) со всеми его полями - в виде окон. 
    В нижней части подменю WINDOW главного меню отображаются 
имена существующих окон; так называются окна, определенные командами
  DEFINE WINDOW <Имя окна> FROM Y1,X1 TO Y2,X2  TITLE<ВырC> ,
где Y1,X1 (Y2,X2) - координаты левого верхнего (правого нижнего)
угла рамки, <ВырC> - необязательный заголовок окна. Существующее,
но неактивное окно на экране не отображается.
    Активация и деактивация окон. Существующее окно активируется
одной из команд   ACTIVATE WINDOW <Список окон  или  ALL>,
                  SHOW WINDOW <Список окон  или  ALL> ,
где атрибут ALL, заменяющий список окон, означает все неактивные окна.
Активные окна могут быть видимыми и невидимыми (скрытыми) - это 2 
переключаемых состояния окна. Лишь одно из окон, активированное 
последним, - текущее окно выдачи: на него направлен поток вывода.
Команда CLEAR очищает текущее окно выдачи или текущий экран.
Выдачу можно скрывать, а затем показать общий итог выдачи, сделав 
окно видимым. К активному окну можно применять команду ACTIVATE WINDOW 
с целью сделать его окном выдачи. В списке окон подменю WINDOW окно 
выдачи обозначено ромбиком. Деактивацию окон (удаление с экрана, но 
не из памяти, и отключение потока вывода) выполняет команда
          DEACTIVATE WINDOW <Список окон  или  ALL> .
Окном выдачи становится окно, активированное последним из оставшихся,
или экран в целом, если активных окон больше нет.
    Понятия активное (неактивное), скрытое окно, окно выдачи относятся 
к статусу окна. Поддержание окон требует памяти. Память расходуется
из расчета приблизительно 4 К на существующее окно, соизмеримое с 
экраном, поэтому, экономя память, окна описывают по мере возникновения 
потребности в них и сразу уничтожают, когда она отпадает.
    Пример 18.1.
   CLEAR             && Очистка экрана, выполняющего роль окна выдачи
   DEFINE WINDOW Okno1 FROM 6,3 TO 20,35 TITLE "ОКНО 1"
   @ 6,5 SAY "ВЫДАЧА ПРОИСХОДИТ НА ЭКРАН, НЕ В ОКНО, ОДНАКО"
   WAIT        && Для продолжения выполнения нажимается любая клавиша
   DEFINE WINDOW Okno2 FROM 0,45 TO 15,77 TITLE "ОКНО 2"
   @ 2,15 SAY "ОДНАКО, ВСЕ ЕЩЕ НА ЭКРАН ..."
   WAIT
   ACTIVATE WINDOW Okno1, Okno2
   @ 0,0 SAY "ВЫДАЧА В ОКНО 2, ОНО ПОСЛЕДНИМ АКТИВИРОВАНО"
   WAIT
   ACTIVATE WINDOW Okno1  && Вполне "легально" Okno1 активируем 2-й раз
   @ 0,0 SAY "ТЕПЕРЬ ВЫДАЧА ИДЕТ В ОКНО 1"
   WAIT
   DEACTIVATE WINDOW Okno1            && Окном выдачи становится Okno2
 * Программа закончилась. Теперь активное Okno2 будет мешать работе.
 * Сделайте последней команду CLEAR WINDOWS или RELEASE WINDOWS (см.ниже)

    Уничтожение и сохранение окон. Команда CLEAR WINDOWS уничтожает
все существующие окна, а RELEASE WINDOWS <Список окон> - только
указанные. При завершении программы окна не уничтожаются автоматически 
и не деактивируются. Даже если вы деактивировали окна (но не
уничтожили), завершая программу, они будут помехой при наблюдении
списка окон в подменю WINDOW в дальнейшей работе, не говоря уже о 
ненужных тратах памяти. Уничтожение окон не ведет к утрате их 
описаний, если предварительно выполнена команда сохранения окон на 
диске       SAVE WINDOW <Список окон  или ALL>  TO  <Приемник> ,
где <Приемник> задают как имя файла (расширение по умолчанию .WIN)
или в виде  MEMO <Имя MEMO-поля>. Атрибут ALL означает "все окна".
Сохраняются форма, положение, содержание и статус окна. Цикл
"Сохранение/уничтожение/восстановление окон" используют при дефиците
памяти. Восстановление окон, включая статус, выполняет команда
     RESTORE WINDOW <Список окон  или  ALL> FROM <Приемник> ,
где ALL означает "все хранимые в <Приемнике> окна". Совпадение
имен хранимых на диске и существующих окон ведет к замене определений 
окон, их содержания и статуса.
    Вложение окон. По умолчанию окно является частью экрана, но
не другого окна. Назовем такие окна независимыми.   Атрибут 
IN WINDOW<Окно> или, короче, IN<Окно>, указываемый при определении 
или активации окон, размещает эти окна в "родительском" <Окне>. 
Соответственно базой отсчета их координат становится позиция Y1+2, X1+2 
<Окна>, т.е. позиция в его левом верхнем углу, с отступом от рамки. 
Если вложенное окно не умещается - у него незаконченная рамка. 
    Атрибут активации "сильнее" атрибута в определении окна.
Например, окно, определенное как вложенное, можно при активации 
сделать независимым, указав атрибут IN SCREEN ("на экране"), или 
вложить в другое окно.
    Пример 18.2. Рассмотрим пример с вложением окон (не изученные
вами атрибуты команд будут пояснены в п. 18.2, пока их игнорируйте):
DEFINE WINDOW Ok1 FROM 6,3 TO 20,35 TITLE "ОКНО1"
DEFINE WINDOW Ok2 FROM 1,45 TO 15,77 TITLE "ОКНО2"
DEFINE WINDOW Ok3 FROM 0,0 TO 9,9 IN Ok1    && Вложение Ok3 в Ok1
 ACTIVATE WINDOW Ok1,Ok2           && Окном выдачи становится Ok2
 ACTIVATE WINDOW Ok3 IN Ok2  && Фактически Ok3 вкладывается в Ok2
 ACTIVATE WINDOW Ok1               && Окном выдачи становится Ok1
    Задание 18.1. Усложните программу примера 18.2, переключая в ней
выдачу, осуществляемую командами SAY, с окна на окно и изменяя
"родителя" окна Ok3. Для наблюдения промежуточных состояний экрана
поставьте команду WAIT ""  после каждой выдачи.

                  18.2. Управляем активными окнами
 
    Скрытая выдача. Команда    ACTIVATE WINDOW <Имя окна> NOSHOW
обеспечивает скрытую выдачу в указанное командой окно в случаях:
 а) окно не было активным и активируется, становясь окном выдачи;
 б) окно было активным и невидимым, но не было окном выдачи: если
командой ACTIVATE направляют выдачу в скрытое окно, то для
подтверждения скрытой выдачи в команде записывают атрибут NOSHOW.
    Указание нескольких окон в такой команде нерационально. Есть
специальная команда для скрытия одного или нескольких окон:
        HIDE WINDOW <Список окон  или  ALL> IN<Окно>,
где <Окно> - это возможное родительское окно скрываемых окон. Атрибут
IN<Окно> не указывают при скрытии независимых окон (или записывают
IN SCREEN). Чтобы сделать скрытое окно видимым, его указывают в команде
SHOW WINDOW (см. п. 18.3). Учтите, что она не назначает окно выдачи.
    Стек окон. Активируемые окна заносятся в стек окон.
Наблюдаемый в подменю WINDOW список окон представляет этот стек
(верхушка стека - внизу) в случае, когда все существующие окна активны
и видимы. Любое из окон стека можно сделать текущим (не путайте с 
окном выдачи), продвигаясь в стеке на одну позицию с каждым нажатием
Ctrl+F1. Перейти к окну непосредственно можно мышью. В отличие
от других окон у текущего окна яркий заголовок, причем на рамке окна 
типа SYSTEM обозначены управляющие символы. Когда текущим является
окно команд, Memo-полей или окно Browse, в нем виден курсор.
    Перекрытия окон. От размеров и координат окон зависит, будут ли 
они перекрываться. Текущее окно не бывает перекрыто и поэтому 
называется окном переднего плана. Если стек не пуст, то при 
активации новых окон их можно поместить в верхушку (TOP) стека 
окон (тогда новое окно выдачи будет и окном переднего плана) или на 
дно (BOTTOM) стека (новые окна будут "в глубине" экрана, причем окно 
выдачи - на самом "дне"). Кроме атрибутов TOP, BOTTOM, в командах 
ACTIVATE WINDOW (SHOW WINDOW) используют SAME, чтобы указать, что
ранее удаленные с экрана или скрытые окна должны занять их прежнее
положение в стеке. Полностью изменить последовательность окон в
стеке можно, указав новую последовательность активных видимых окон
в команде SHOW.
    Изменение координат, размеров окон (для создания нового образа 
экрана) может осуществляться программно. Мышь (если окно оформлено 
как SYSTEM) и клавиатура позволяют делать то же самое в интерактивном 
режиме (с текущим окном), если определение окна разрешает 
соответствующее изменение. 
    Предельные размеры окон. Три размера окна: нормальный (заданный
определением), минимальный и максимальный обозначим соответственно
NORM, MIN, MAX. Окно MAX занимает весь экран или родительское окно.
Окно MIN - это строка с заголовком или именем окна. Размер окна MAX 
(MIN) возможен, если в определении окна указана опция ZOOM (MINIMIZE). 
Размер NORM можно изменять командой ZOOM или с помощью элемента ZOOM 
меню. Изменение размера NORM->MAX ("распахивание" окна), MAX->NORM 
производят одним и тем же воздействием: выбирают мышью символ   на 
рамке окна или нажимают Ctrl+F10. Для изменений NORM->MIN, MIN->NORM 
нажимают Ctrl+F9. В программе приведение окна к размерам MIN, MAX, 
NORM выполняет команда ZOOM (см. п. 18.3).
    "Плавные" изменения размера (перемещения) окна разрешают опции
GROW (FLOAT) определения окна, а осуществляют - клавиши управления 
курсором после подготовки окна клавишами Ctrl+F8 (Ctrl+F7). Рамка 
подготовленного окна мерцает. Выход из этих режимов производят
нажатием любой клавиши (мерцание рамки прекращается).
Для изменения размера окна мышью символ    в правом нижнем углу 
рамки накрывают ее маркером и, придерживая левую кнопку мыши, 
"буксируют" этот угол. Для перемещения окна аналогичные действия 
выполняют, когда маркер мыши находится на верхней границе окна.
    "Усечение" содержания при уменьшении размеров окна влечег
утрату информации окна (к преобразованию NORM->MIN это не относится).
    Складирование окон. Окна, приводимые к размеру MIN, можно 
складировать в правом нижнем углу экрана, возвращая их по мере
надобности в прежнее положение. Для приведения к размеру MIN и 
"помещения окна на склад" нажимают Shift+Ctrl+F9 или дважды 
нажимают кнопку мыши при положении ее маркера на верхней границе 
окна и нажатой клавише Shift. Те же действия осуществляют возврат 
окна в прежнее положение.
    Задание 18.2. Создайте и активируйте окно типа SYSTEM, указав 
в определении перечисленные выше атрибуты - разрешения изменений. 
Опробуйте управление окном с помощью клавиатуры и мышью. 
 Примечание. В конце определения дайте атрибут COLOR SCHEME 8.

       18.3. Продолжаем изучать оконные команды и функции

    Рассмотрим неизученные опции команды DEFINE WINDOW. На нижней
границе (рамке, если она есть) окна выводится текст <ВырC>, если
задана опция FOOTER<ВырC>. Как и заголовок, этот текст произволен,
например, представляет директиву для пользователя.
    Опции DOUBLE, PANEL, <ВырC>, SYSTEM соответственно означают,
что рамка окна двойная, дана сплошной полосой, образована из символов
<ВырC> (см. п. 9   ), типа SYSTEM. Программист указывает одну из 
них или NONE (отсутствие рамки). По умолчанию окно имеет одинарную
рамку. 
    Опция FILL<ВырC> задает символ, которым заполняется окно при
первоначальной активации. Если в <ВырC> больше одного символа,
используется первый. 
    Опция CLOSE позволяет уничтожить окно с помощью мыши: маркер
наводят на символ   в левом верхнем углу рамки и нажимают кнопку.
    Опция SHADOW в среде DOS отображает окно с тенью.
    COLOR SCHEME <ВырN> указывает используемую цветовую схему, а
COLOR <Список цветовых пар> непосредственно задает используемые цвета
(см. п.15.7).
    В команде ACTIVATE WINDOW (SHOW WINDOW) возможны атрибуты TOP,
BOTTOM, SAME, рассмотренные в п. 18.2. Атрибут REFRECH используется в
SHOW WINDOW при повторной выдаче окна BROWSE, ибо изменения данных,
сделанные командой REPLACE, сами по себе не отображаются в окне.
   Перемещение окна выполняет команда MOVE, имеющая 2 варианта:
а) MOVE WINDOW<Окно> TO Y1,X1  && Новые координаты левого верхнего угла
б) MOVE WINDOW<Окно> BY dY,dX  && Соответствующие приращения координат
dY,dX могут быть отрицательными. Вложенное окно перемещается в границах
родительского окна.
   Управление размером окна (возможно и перемещение) реализует команда
               ZOOM WINDOW <Окно> <Новый размер окна> ,
где <Новый размер окна> задан опциями MIN, MAX, NORM  или  в виде 
MIN AUTO, что означает приведение к размеру MIN и "складирование" окна. 
Допускается прямой переход от текущего размера MAX к размеру MIN,
и наоборот. 
    Дополнительная опция, записываемая после NORM, имеет варианты:
 FROM Y1,X1 - указываются новые координаты левого верхнего угла окна;
 SIZE NY,NX - задается новое число строк NY и столбцов в окне NORM;
 FROM Y1,X1 SIZE NY,NX - сочетаются действия вышеуказанных вариантов;
 FROM Y1,X1 TO Y2,X2 - определение окна, как в DEFINE WINDOW, т.е.
также изменяется и размер окна, и положение его левого верхнего угла. 
   В принципе, переместить (1-й вариант) можно и окно MIN. 
Примечания. 1. Вместо слова FROM допускается использование слова AT.
 2. Уменьшение размера окна NORM ведет к необратимому "усечению"
содержания, которое, очевидно, должно обновляться.
    Кроме CLEAR, oчистку текущего окна выдачи реализует команда
              SCROLL 0,0, Y2-Y1-2, X2-X1-2, 0  ,
где Y1,X1, Y2,X2 - координаты из описания окна. Если в описании окна
участвовала опция FILL<ВырC>, то при очистке окно заполняется
символами <ВырC>. В отличие от CLEAR текущий GET-список не очищается.
    Кроме команды назначения окна для вывода Memo-полей (п. 16.2), 
имеется команда            SET MESSAGE WINDOW <Окно> ,
предоставляющая ранее описанное <Окно> для вывода сообщений MESSAGE.
    При создании гибких программ и отладке удобны оконные функции.
Функция WExist(<Окно>) возвращает .T. для существующего окна любого
статуса. Функция WMinimum() (WMaximum() ) возвращает .T., если текущее
окно (окно переднего плана) имеет размер MIN (MAX). Функция WRows() 
(WCols() ) возвращает число строк (колонок) в текущем окне. Функция 
WLRow() (WLCol() ) возвращает номер верхней строки (левой колонки) 
текущего окна на экране. WTitle() возвращает строку - заголовок 
текущего окна. Все указанные функции могут иметь аргумент <Окно> и 
тогда применяются не к окну переднего плана, а к заданному <Окну>.
    Имеются три "экзотические" функции, возвращающие логическое
значение или имя окна, если аргумент <Окно> не задан. Функция WonTop() 
(WOutput()) возвращает имя окна переднего плана (имя окна выдачи). При 
указанном аргументе возвращается .T., если <Окно> является окном 
переднего плана (окном выдачи), иначе - .F.. WLast() возвращает имя 
окна, активированного непосредственно перед активацией действующего 
окна выдачи - преемника окна выдачи. Если аргумент <Окно> задан, 
возвращается .T. для <Окна>, являющегося преемником, иначе - .F..
    Задание 18.3. Создайте окно типа SYSTEM, окна с двойной и
сплошной рамкой при различных цветовых установках, заполните и
опробуйте на них действие команды ZOOM. Очистите окна. Используйте
WAIT как в задании 18.1.
     
       18.4. Знакомимся с окнами редактирования. Команда Edit  

    Окно типа SYSTEM содержит управляющие и информационные символы
на рамке - полосе контрастной расцветки:
       -----------------<Заголовок окна> ------------------
          ----------------------------------------------



          ----------------------------------------------
       -----------------------------------------------------
Символы в углах рамки рассмотрены в пп. 18.2, 18.3, кроме символа
в левом нижнем углу. Данный символ, если он есть, используется для
разделения окна на 2 части вертикальной линией: его накрывают 
маркером мыши и "буксируют" вправо. Вместе с ним перемещается
вертикаль, нижний край которой обозначен данным символом. Обычно 
разделяют на части окно редактирования. На нижней (правой) части 
рамки имеется ромбик, показывающий горизонтальное (вертикальное) 
положение курсора в окне по отношению к фактическим границам данных. 
Например, если текущей в окне BROWSE является одна из первых записей 
большой БД, то ромбик на правой полосе (границе) будет наверху, а 
если одна из последних - внизу.
    Окна редактирования. Эти окна возникают при выполнении команд
BROWSE, CHANGE (EDIT), APPEND, INSERT, если открыта БД. Окно
команды BROWSE по расположению данных подобно таблицам SELECT
(см. п. 17.1). В остальных командах применяется другой формат
окна: поля записи выводятся одно под другим, например:
    Famil   Бендер-Задунайский О.Э.
    Pol     М
    Fak     ИЭХМ
    Kurs    2
    Dosje   memo
Будем называть его EDIT-форматом. Независимо от формата в
управлении окнами редактирования много общего (см. табл. 18.1).
                                                   Таблица 18.1
--------------------------------------------------------------------
      К л а в и ш и              Д е й с т в и е   к л а в и ш
--------------------------------------------------------------------
 Home (End)            Перевод маркера на начало (конец) поля
 Tab (Shift+Tab)       Перевод маркера на следующее (предыдущее) поле
 Enter                 Перевод маркера на следующее поле
 PgUp (PgDn)           Смещение маркера назад (вперед) на один экран
Ctrl [+Home,+PgUp,+PgDn]     Выдача окна с текстои MEMO-поля
 Ctrl+W (Ctrl+End)     Окончание редактирования с сохранением изменений
 Esc                   То же,но изменения в текущем поле не сохраняются
 Ctrl+Y                Заполнение текущего поля пробелами
 Ctrl+T                Установка (снятие) пометки к удалению тек.записи
 Ctrl+N                Добавление записи в конец БД
-----------------------------------------------------------------------
  Примечания. 1.Для перемещения по таблице можно также использовать 
мышь и клавиши управления курсором.
  2.Действие клавиш Ctrl+T, Ctrl+N может быть отменено путем записи в 
командах опций NODELETE, NOAPPEND. При добавлении записи (Ctrl+N) в нее
поступают значения из текущей записи, если до команды редактирования 
выполнена команда SET CARRY ON. Для выборочного копирования полей 
записывают другую команду:       SET CARRY TO <Список полей>.
Режим копирования удобен, если группы записей имеют одинаковое или
сходное содержание хотя бы некоторых полей.
    Редактирование MEMO-полей. Первоначально в таблице мы наблюдаем слово
"memo", если в записи MEMO-поле пустое, иначе - "Memo". Для появления
MEMO-текста нажимаем клавиши (табл. 18.1, например Ctrl+Home) либо
наводим маркер мыши на "Memo" и дважды нажимаем кнопку мыши. В случае
"memo" те же действия вызовут появление пустого окна для набора текста.
Редактирование MEMO-поля завершается клавишами Ctrl+W (Ctrl+End), Esc,
т.е. теми же клавишами, с тем же действием, что и редактирование всей
таблицы.
    Команда EDIT (EDIT можно заменять на CHANGE) записывается как
   EDIT FIELDS<Список полей> <Границы> <Условия> <Прочие опции> .
В <Списке полей> могут быть поля любых открытых БД (уточненные
алиасом, если БД неактивна) и вычисляемые поля (см. ниже). В его
отсутствие на редактирование предъявляются все поля активной БД.
"Минимальный вид" команды: EDIT. Опции будут рассмотрены в п. 18.5.
    Ключи редактирования полей. Элемент <Cписка полей> - это
              <Имя поля><Набор опций - ключей>.
 В выражениях ключей возможны функции пользователя, позволяющие
 выполнять дополнительную обработку данных таблицы.
    Ключ начинается со знака ":" (или знака "/", если этот знак
не используется в ключах еще и как знак деления):
:<ВырN> - задание размера "окошка" для поля (возможна прокрутка);
:R - указание, что данное поле можно только читать;
:V=<ВырL> - контроль значения при выводе курсора из поля; если
  <ВырL> не равно .T., курсор не может перейти в следующее поле.
  Если ключ :V не сопровождается ключом :F, контролируются лишь
  измененные при редактировании значения полей. Ключ :V может
  использоваться как уловка для включения дополнительной обработки:
  <ВырL> может быть функцией пользователя.
:B=<Выр1>,<Выр2> - задание диапазона для чисел или дат с целью
  контроля при выходе из поля. Функции пользователя в <Выр1>, <Выр2>
  недопустимы. Для "одностороннего" контроля записывают :B=,<Выр2>
  или :B=<Выр1>, .
  Примечание. Кроме этого "явного" контроля дат, есть
  автоматическая проверка допустимости даты и ее составляющих.
  Для получения пустой даты используйте клавиши Ctrl+Y.
:F - распространение действия ключей :V, :B на исходные значения
  полей. Пример:  :R:B=70,210:F  - числовое поле не изменяют
  (ключ :R), но контролируют его значения;
:E<ВырC> - замена сообщением <ВырC> стандартного сообщения
"Invalid Input"(выдается, если :V- или :B-контроль выявил ошибку);
:P=<ВырC> - задание GET-шаблона <ВырC> (см. п. 1.14) для данного
  поля; функция M в таких GET-шаблонах запрещена;
:H=<ВырC> - задание заголовка <ВырC> поля; по умолчанию - имя поля;
  Пример: :H="" (отмена заголовка). Имена полей в показанном выше
  окне заменятся словами "Фамилия","Пол","Факультет","Курс","Досье",
  если в <Списке полей> указать соответствующие ключи :H=<ВырC>;
:W=<ВырL> - управление входом в поле (вводом в него курсора); если
  <ВырL>=.F., курсор в поле не входит и редактирования не будет.
  Пример: заполнение символьного поля значением "носит бороду"
  разрешается лишь для мужчин ключом :W=Pol="M"; по умолчанию
  поле пустое.
Роль ключей :V,:B,:W подобна роли опций VALID, RANGE, WHEN
команд @ ... GET.
    Вычисляемые поля. В <Списке полей> можно указывать выражения
(константные, например "км", или содержащие имена полей БД),
возможно, с функциями пользователя и Iif(). Вычисляемые "поля" не
запоминаются в БД и используются лишь для визуального анализа
данных на основе каких-либо критериев. Тем самым создается некое 
подобие электронных таблиц. Для задания ширины колонки можно, как 
и для других полей, использовать ключи :<ВырN>  и :P.
    Пример 18.3. Некоторая организация, заинтересованная в
выпускниках вуза, дотирует студентов 4 - 6 курсов (БД Student,
см. п. 3.10). Доплата (процент от стипендии - поле Stipa)
составляет 50%, если студент имеет "отлично" по профильным
предметам (поле Pr), 35% - если его средний балл (поле Srb)
выше 4.5, 20% - для прочих студентов. Вычисляемое поле Dop
содержит денежное выражение доплаты.
  USE Student
  EDIT FIELDS Famil:10:R:H="Фамилия", ;  && Усечение до 10 символов
  Kurs:R:F:V=Val(Kurs)<6.AND.Val(Kurs)>0 :H="Курс", ;
  Dop = Stipa*Iif(Pr=5, 0.5, Iif(Srb > 4.5, 0.35, 0.2)):H="Доплата" ;
  FOR .NOT.Deleted() .AND. Val(Kurs) > 3
   В условиях, ключах и выражениях вычисляемых полей используют любые
 поля открытых БД, при необходимости уточняя их алиасом.
    Задание 18.4. Представьте, что в БД Student имеются логические
поля P1 (.T., если студент делает утреннюю пробежку или гимнастику),
P2 (.T., если он занимается в спортивной секции),
P3 (.T., если активно участвует в спортивных праздниках),
P4 (.T. отражает регулярное участие в воскресных вылазках на природу).
    Поля P1,P2,P3,P4 автором EDIT-таблицы оценены как 25, 40, 20, 15
очков соответственно. Дать определение вычисляемому полю  Sport
("Спорт"), содержащему сумму очков для полей со значением .T.
и занимающему в таблице 5 позиций.

        18.5. Работаем с BROWSE-окнами, командой BROWSE

    Команда BROWSE - самая мощная из команд, обеспечивающих просмотр
и редактирование записей открытых БД. Создаваемая ею таблица данных
(стереотип: записи - строки таблицы, поля - столбцы) занимает весь
экран или заранее описанное окно, указанное в команде опцией
WINDOW<Имя окна>. Может быть открыто до 25 BROWSE-таблиц, если
ресурсы памяти позволяют иметь столько окон. Из множества опций
команды такие, как <FOR-условие>, FIELDS<Список полей>, NOWAIT,
NOOPTIMIZE, COLOR<Список цветовых пар>, COLOR SCHEME<Номер>,
TITLE<ВырC>, объяснены в гл. 15, 17 и п. 18.4. 
    Заголовок BROWSE-окна (опция TITLE) указывают, если для разных
BROWSE-таблиц последовательно используют общее окно. В этом случае 
он замещает прежний текст на верхней границе окна.
    Опция NOMENU подавляет вызов системного меню BROWSE (в главном
меню не возникает пункт BROWSE), но вместе с тем "перестают работать"
клавиши Ctrl+T, Ctrl+N.
    Использование файла формата. Файл формата создается как
текстовый файл (расширение имени .FMT), содержащий команды 
@ ... SAY ...GET и, возможно, команду READ. Если в команде BROWSE
используется опция FORMAT, предварительно должна быть выполнена
команда SET FORMAT TO <Имя файла формата>. Команда READ, если ее
нет в файле, записывается после BROWSE. В файле формата описываются
все детали размещения на экране, оформления и доступа к полям -
GET-переменным. В этом случае <Список полей> в BROWSE не нужен.
Требуя большей работы программиста, данный вариант более гибок
в отношении размещения данных и может быть "красочнее".
   Пример 18.4. Подключается файл формата Prim.
 SET FORMAT TO Prim
 USE Student
 BROWSE FORMAT  && Если в файле нет команды READ, ее надо дать ниже
    Управление редактированием. Опция NODELETE запрещает пометку
записи к удалению, выполняемую клавишами или мышью, а опция
NOAPPEND - добавление записи (клавиши Ctrl+N). NOEDIT и NOMODIFY
запрещают редактирование; добавление и пометка записи к удалению
не запрещены. Опция FREEZE<Имя поля> разрешает редактировать
единственное, указанное в ней поле. Остаются, однако, "лазейки":
указанные изменения могут производиться командами в функциях
пользователя. Радикальный запрет изменений дает лишь открытие
БД командой USE с опцией NOUPDATE.
    Управление на уровне записи. Предусловие <ВырL1> в опции
WHEN<ВырL1> влияет на характер доступа к записи. В случае <ВырL1>=.F.
она доступна лишь для чтения. Постусловие <ВырL2> в опции 
VALID<ВырL2>:F ERROR<ВырC> запрещает выход из записи (курсор не 
покидает строку этой записи), если <ВырL2>=.F.. При попытке вывести
курсор, выдается сообщение <ВырC>, а в его отсутствие - стандартное 
сообщение "Invalid Input". Если в опции VALID не записан ключ :F,
подвергаются контролю лишь измененные записи. 
    Ограничение области действия BROWSE. Совместно с FOR-условием 
используют опцию REST, предотвращающую повтор рассмотрения записей 
от начала БД: при повторном вызове BROWSE-окна маркер остается на 
прежней записи. С помощью опции KEY <Выр1> ,<Выр2> область действия 
может быть ограничена диапазоном [<Выр1>,<Выр2>] значений ключа
ведущего индекса. Граница <Выр2> не обязательна: зачастую достаточно
"мгновенной" выдачи в окно первой записи с ближайшим к <Выр1>
ключом и следующих за нею, а далее работа идет в интерактивном
режиме. 
    Чтобы выборка по FOR-условию (или в соответствии с внешним
фильтром) протекала столь же быстро, применяйте Rushmore-технологию
(п. 16.4).
    Окончание просмотра/редактирования. Закрытие BROWSE-окна.
При завершении команды клавишами Ctrl+W (Ctrl+End) в файле FOXUSER.DBF
сохраняются все параметры команды и отражаются итоги возможной 
перестройки таблицы. Чтобы в данном или очередном сеансе работы вновь 
выдать таблицу на экран, достаточно записать BROWSE LAST (если данный
или иной пользователь не работал затем с другой таблицей). При выходе
из BROWSE окно редактирования остается на экране (неактивное), только
если указана опция NOCLEAR. Автоматическое закрытие BROWSE-окна и
завершение команды происходит через <ВырN> секунд от момента открытия,
если была задана опция TIMEOUT<ВырN> и за указанное время в таблице
не было произведено никаких изменений.
    Запоминание конфигураций BROWSE-таблиц. Автоматическое сохранение
конфигурации в файле FOXUSER (см. выше) происходит всякий раз.
Хранится конфигурация BROWSE-окна, закрытого последним. Опция
PREFERENCE<ВырC> команды BROWSE позволяет хранить и использовать
"персональный снимок" для каждого из них: в FOXUSER.DBF создается
очередная запись, содержащая <ВырC> в поле Name ("Имя"), опции
команды и конфигурацию окна. Если окно открыто командой BROWSE
PREFERENCE<ВырC> и в ней обновленные опции или окно во время сеанса
перестраивалось, запись с именем <ВырC> обновится.
  Создав некий базовый вариант конфигурации BROWSE-окна и запомнив
его в FOXUSER, можно избежать последующих обновлений: нужно в этом
файле найти запись с именем <ВырC> и заменить в этой записи значение
.F. на .T. в поле ReadOnly. Различные конфигурации BROWSE-таблиц
(даже для одной и той же БД) можно создать и запомнить, предлагая
пользователю прикладной программы целый их "ассортимент".
    Задание 18.5. Работая в командном окне, опробуйте работу команды
BROWSE с раличными опциями и ключами  на примере БД, содержащей
MEMO-поле. В частности, создайте свою "базовую конфигурацию" таблицы.

         18.6. Оформляем и перестраиваем BROWSE-окно 
    
    В момент выполнения команды BROWSE может иметься окно выдачи,
однако указание окна в самой команде приоритетнее: таблица выводится
в него, окно выдачи игнорируется. Атрибут NORMAL также отменяет вывод
таблицы в окно выдачи: она выводится в окне типа SYSTEM стандартного
расположения. Если в команде указан и этот атрибут, и окно, таблица
выдается в указанное окно, оформляемое как окно SYSTEM. Пример:
BROWSE WINDOW z NORMAL.
    Благодаря ключам :H и опции TITLE возможно "русскоязычное"
оформление головки таблицы. Цветовое оформление BROWSE-таблиц по
умолчанию обеспечивается цветовой схемой 10 (см. п. 15.7). Вы
можете указать или создать иную цветовую схему. Наконец, можно
удалить вертикали, разделяющие колонки таблицы, задав опцию 
NORGRID.
    Если полей выводится столько, что они не умещаются на экране
или в окне (нужно учитывать, что длинные заголовки полей сокращают
число наблюдаемых колонок), возможны следующие решения:
  а) мы удовольствуемся прокруткой по горизонтали: появление 
"из-за экрана" новых полей "выталкивает" поля с другой стороны
экрана.
  б) BROWSE-окно (весь экран, если окно не задано) делим на 2
части вертикалью (см. начало п. 18.4), указывая опцию LOCK<ВырN1>.
В левой части окна отображаются <ВырN1> первых полей <Списка 
полей> (первых в структуре БД, если список полей опущен). 
Вертикали между ними можно удалить, указав опцию NOLGRID. Эти
поля, например, табельный номер, фамилия, всегда остаются на
экране. В правой части мы пользуемся прокруткой. Добавив опцию
PARTITION<ВырN2>, мы задаем положение границы, разделяющей части:
<ВырN2> указывает колонку, где она размещается. Опция LPARTITION
помещает курсор в левую часть (по умолчанию курсор в правой).
    Если нужно, чтобы продвижение записей по вертикали не было
синхронным (например, в левой части они неподвижны, а в правой
перемещаются), задают опцию NOLINK. Это позволяет наблюдать и
сравнивать записи, удаленные друг от друга: они будут находиться
в разных частях окна.
  в) BROWSE-окно делим на 2 части, указывая опцию PARTITION<ВырN2> 
и для левой (правой) части опцией LEDIT (REDIT) задаем EDIT-формат 
окна. Последнее позволяет наблюдать запись в целом, если полей не 
больше, чем строк в окне (на крайний случай имеется прокрутка).
  Переформатирование окна в интерактивном режиме. После предъявления
BROWSE-таблицы на экран ее можно изменять: увеличивать и уменьшать
ширину колонок, изменять взаимное их расположение, изменять размеры
и положение таблицы, делить ее на 2 части. Для этих целей можно
использовать подменю BROWSE, но удобнее использовать мышь. Вертикали 
справа в изображенной выше таблице возникли при скрытии колонок 
полей: для скрытия колонки маркер мыши наводят на вертикаль и
"буксируют" влево, придерживая левую кнопку мыши. Скрытие полей делают
с целью освобождения пространства для других полей (в данном примере
- для поля Famil). Для расширения колонки вертикаль (правую границу
колонки) "буксируют" вправо. Перестановку колонок выполняют, "буксируя"
заголовок колонки.

    Пример 18.5. Создадим окно из двух частей, левой и правой,
следующего вида:
              EDIT-ФОРМАТ                    СТУДЕНТЫ
    Фамилия И.О. Бендер-Задунайский О.Э.  Фамилия
    Родился      30.03.01                ------------------------
    Пол          М                        Бендер-Задуна
    Факультет    ИЭХМ                     Доливо-Добров
    Курс         5                        Галкин А.А.
    Ср. балл     3.0                      Малкин Б.Б.
    Стипендия    125000                   Палкин В.В.
   -------------------------------------  Салкин Г.Г.
    Фамилия И.О. Доливо-Добровольский Х.  Чалкин Д.Д.
    Родился      21.04.02                 Залкинд Е.Е.
   
  SET DATE GERMAN
  USE Student
  BROWSE NOEDIT TITLE "EDIT-ФОРМВТ                      СТУДЕНТЫ" ;
  PARTITION 38    LEDIT     FIELDS Famil:13:H="Фамилия И.О.", ;
  Pol:H="Пол", Dtr:H="Родился", Fak:H="Факультет", ;
  Kurs:H="Курс", Srb:H="Ср. балл", Stipa:H="Стипендия":B=,10000000
    Поскольку синхронное продвижение записей в частях окна не 
подавлялось, запись, отмеченная маркером в правой части, 
присутствует и в левой.

     Задание 18.6. Опробуйте различные варианты оформления таблицы,
включая вариант разделения на 2 части. Осуществите интерактивное
изменение таблицы с помощью подменю BROWSE и мыши.

                    ЗАКЛЮЧЕНИЕ К ГЛАВЕ 18

    Изучив работу с окнами, вы освоили средства редактирования данных
и приобрели начальную квалификацию в части разработки пользовательского
интерфейса. Три следующие главы развивают эту тему.

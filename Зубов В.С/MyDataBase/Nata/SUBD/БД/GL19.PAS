                           ГЛАВА 19.
                    СОЗДАЕМ И ИСПОЛЬЗУЕМ МЕНЮ

     Меню является компактной экранной формой, обеспечивающей
взаимодействие программы и пользователя. Для построения меню
FOXPRO предоставляет средства, использованные при создании
системного интерфейса. В п. 1.15 рассмотрены простейшие средства.
     Изучив главы 19-21, вы сами сможете создавать сложный
интерфейс пользователя. Данная глава основывается на предыдущей:
в использовании окон и dBASE-меню много общего.

              19.1. Знакомимся с общими положениями

     В FOXPRO применены две концепции меню, одна из которых
(используется в "FOX-меню") основана на общих для многих языков
идеях, а другая (используется в "dBASE-меню") - заимствована из
СУБД dBASEIV. В п.1.15 рассмотрено простейшее FOX-меню. Типична
следующая схема FOX-меню, допускающего множественный отбор:
     < Описание элементов меню >
 < Команда (команды) описания FOX-меню >
     DO WHILE .T.                              && "Бесконечный" цикл
 < Команда активации FOX-меню>        && Отображение меню, включение
      DO CASE                                    && механизма выбора
       CASE <Меню-переменная>=...       && Значение меню-переменной
       <Действия, соответствующие  && определяется сделанным выбором
        некоторому выбору>
              .  .  .
       CASE <Меню-переменная>=...
        EXIT                                       && Выход из цикла
      ENDCASE
     ENDDO       && Множественный отбор обеспечивается за счет цикла

     Когда цветовой маркер наведен на нужный пункт меню и нажата клавиша
Enter, меню-переменная получает значение номера выбранного пункта и
меню деактивируется, поэтому команда активации поставлена в цикл.
     dBASE-меню сложнее, дают больше возможностей, их "жизненный цикл"
Определение -> Активация -> Использование -> Деактивация -> Уничтожение
подобен "жизненному циклу" окон. Определение является самостоятельной
единицей; оно может использоваться и по завершении программы: 
dBASE-меню могут быть общим "достоянием" нескольких программ. Активация
(использование, деактивация) может быть неоднократной. Как и описания
окон, определения меню занимают память, следовательно и к ним
относятся рекомендации п.18.1. Этап "использование" коренным образом
отличается от использования FOX-меню: dBASE-меню "само" обращается
к блокам (командам) обработки сделанного выбора, поэтому можно
строить децентрализованные программы, которые "держатся" на меню и
почти на 100% состоят из блоков, приданных меню. "Трасса выполнения"
такой программы зависит от "сиюминутных" решений пользователя.
Освоив системный интерфейс FOXPRO, легко понять эту идею.
    В FOX- и dBASE-меню используются одинаковые технические решения:
 - при деактивации меню восстанавливается перекрытое им изображение;
 - пункт вертикального меню (подменю) можно выбрать нажатием 1-й буквы
(это не относится лишь к подменю с компонентами БД и справедливо во
всех версиях FOXPRO для латинских букв); при одинаковых начальных
буквах пунктов выбирается первый по порядку из них; если действует
установка SET CONFIRM ON, для завершения выбора нужно нажать Enter;
 - в вертикальных меню символ "\" в начале пункта препятствует его
выбору (такой пункт изображен приглушенным цветом); например, "\"
добавляют после выбора пункта, чтобы воспрепятствовать повторному
выбору. В вертикальном меню символ "\" позволяет иметь заголовки
разделов, например: "\СЕРВИС: ";
 - двухсимвольный пункт "\-" создает разделительную линию
(горизонталь) в вертикальном меню;
 - символы "\>" включают в запись пункта слева от "горячей" буквы,
которая будет выделена цветом, например "В\>ЫХОД" (знаки "\>" на
экране не высвечиваются; пункт "ВЫХОД" можно будет выбирать
нажатием буквы "Ы");
 - можно выбирать пункты (подпункты) меню мышью.
    Поясним некоторые обозначения, используемые в командах меню.
 <Имя массива> обозначает символьный массив пунктов меню (подменю);
 <Размер> - размер массива, число пунктов меню (подменю);
 Y1,X1 (Y2,X2) - координаты левого верхнего (правого нижнего) угла
 области, занятой вертикальным меню (подменю) на экране; эти
 координаты - оконные, если в определении меню указано окно;
 TITLE<ВырC> указывает заголовок <ВырC> вертикального меню;
 <Номер> - номер пункта меню в виде <ВырN>.
     Выполняя задание 19.1, вы воспользуетесь командами из п.1.15.
В команде SET MESSAGE TO <ВырN>, указывающей строку комментария,
вместо атрибута CENTER ("по центру") можно записать LEFT (RIGHT),
обозначив этим, что комментарий надо "прижать" к левому (правому)
краю строки.
    Задание 19.1. Создайте вертикальное меню с пунктами "БАЗЫ:",
"Создание базы","Дополнение","Редактирование","СЕРВИС:",
"Индексирование","Копирование","Сортировка","Упаковка","ВЫХОД".
Пункты "БАЗЫ:","СЕРВИС:" не должны выбираться - это заголовки
групп пунктов. Ниже пунктов "Редактирование","Упаковка"
сделайте разграничительные горизонтальные линии.

       19.2. Создаем вертикальные FOX-меню (POPUP-меню)

     Создание вертикального FOX-меню удобнее и проще, чем меню
с произвольным расположением пунктов (см. п.1.15). Подобно
Achoice-меню (п.5.8) оно имеет прокрутку. Пункты меню сведены в
символьный массив, после определения и заполнения которого
описывается само меню:
  @ Y1,X1 MENU <Имя массива>,<Размер>,<ВырN> TITLE<ВырC>,
где <ВырN> - число строк меню. Длина пункта меню ограничена 76
символами.
    Команда         READ MENU TO <Переменная> SAVE
активирует POPUP-меню, отображая его. Значением числовой
<Переменной> является номер пункта меню  а)выделяемого маркером
при предъявлении меню на экран (<Переменная> предварительно
получает значение), б)обозначенного маркером в момент нажатия
Enter (значение <Переменной> отражает выбор). Клавиша Enter
реализует выбор, клавиша Esc - отказ от выбора (<Переменная>
получает значение 0). Опция SAVE позволяет сохранять меню на
экране, иначе оно удаляется после сделанного выбора.
    Пример 19.1. Создадим меню для отбора приобретаемых
материалов, шифры которых поместим в символьный массив Marka.
Выбранные шифры переносятся в 1-й столбец массива Zakup и
высвечиваются на экране справа от меню. Повторный выбор шифра
блокируется. Для того, чтобы испытать программу, сформируем
искусственные "шифры" с помощью блоков Buk, Cif. Функция Buk(N)
возвращает строку из N случайных букв, а Cif(M) - из M
случайных цифр. Пусть будет 4 буквы (начало "шифра") и 3 цифры.
Возьмем 20 шифров.
  SET TALK OFF
  DECLARE Marka[20], Zakup[20,2]
  FOR J=1 TO 20
   Marka[J] = Buk(4) + Cif(3)
  ENDFOR
  @ 3,24 MENU Marka, 20 TITLE "ШИФРЫ МАТЕРИАЛОВ"
  CLEAR                                          && Очистка экрана
  @ 1,25 SAY "МАССИВ Marka --> МАССИВ Zakup"
  @ 2,25 SAY Replicate("*",30)
   i = 0
   DO WHILE .T.
   READ MENU TO n SAVE    && n не задано, маркер выделяет 1-й пункт
    IF n = 0                             && Случай отказа от выбора
     EXIT                                         && Выход из цикла
    ELSE                && Мы не воспользовались структурой DO CASE
     i = i+1                           && ввиду малого числа ветвей
     Zakup[i] = Marka[n]
     @ 3+n,50 SAY Zakup[i]          && Отображение выбранного шифра
     Marka[n] = "\"+ Marka[n]     && Блокирование повторного выбора
    ENDIF
   ENDDO
 @ 24,2 SAY "ВЫБРАНО"+ Str(i,4)+" ШИФР"+Iif(i=1,"",Iif(i<5,"А","ОВ"))
           FUNCTION Buk
           PARAM N,K,B,J,S                && K,B,J,S - не параметры
           S = ""
           K = ASC("Z")
            FOR J=1 TO N
            S = S + Chr(Int(K - 26*Rand())+1)
            ENDFOR
           RETURN S
           FUNCTION Cif
           PARAM N
           RETURN Padl(Ltrim(Str(10**N * Rand(), N)),3,"0")
    Заметим, что при большем числе шифров возможно превышение
предельного номера строки (в команде @ 3+n ...SAY) и тогда данный
вариант отображения выбранных шифров перестает "работать".
Попробуйте усовершенствовать программу.
    Задание 19.2. Измените программу примера 19.1 с тем, чтобы
при повторном выборе шифр исключался из массива Zakup и исчезало
его отображение справа от меню.

       19.3. Строим двухуровневое FOX-меню (PULLDOWN-меню)

    Двухуровневое FOX-меню образовано размещаемой в верхней части
экрана линейкой пунктов - заголовков вертикальных подменю - и
самими подменю. Уточним: в линейке могут быть пункты, не имеющие 
подменю. Подменю отображается на экране, когда маркер линейки
наводят на его заголовок. От последнего (первого) пункта линейки
есть переход к первому (последнему) пункту.
    Линейка заголовков описывается командой
            MENU BAR <Имя массива>, <Размер>  .
Массив должен иметь 2 столбца: первый содержит пункты линейки, а
второй - комментарии к ним. Комментарий выводится в строке,
предварительно указанной в команде SET MESSAGE TO. В отсутствие
комментария во 2-й столбец помещают пустую строку.
    Каждое подменю описывает команда
           MENU <Номер>,<Имя массива>,<Размер>,<ВырN> ,
где <ВырN> - число строк меню, указываемое, если меню целиком не
умещается на экране.
    Активирует меню команда
       READ MENU BAR TO <Bar-переменная>,<Переменная> SAVE
Опция SAVE пояснена в п.19.2, Bar-переменная - это номер пункта
линейки, <Переменная> - номер подпункта. Если до активации меню
эти значения заданы, то на экран будет предъявлено соответствующее
подменю с выделением в нем указанного пункта. Эти же переменные
отражают результат выбора, когда нажата Enter. При нажатии Esc
(отказ от выбора) они получают значение 0. <Переменная> равна 0
также в отсутствие подменю.
    Пример 19.2. Воспользуемся "сюжетом" задания 19.1, сделав строки
"БАЗЫ:         ", "СЕРВИС:       ", "ВЫХОД" заголовками подменю:
  SET TALK OFF
  CLEAR
  DECLARE X[3,2], Y[3], Z[4]
  X[1,1] = "БАЗЫ:          "
  X[2,1] = "СЕРВИС:        "
  X[3,1] = "ВЫХОД"
  X[1,2] = ""                 && Присвоение значений элементам 2-го
  X[2,2] = ""            && обязательно и в отсутствие комментариев
  X[3,2] = ""
  Y[1] = "Создание базы"
  Y[2] = "Дополнение"       &&          Исходное состояние меню:
  Y[3] = "Редактирование"   &&     БАЗЫ:         СЕРВИС:      ВЫХОД
  Z[1] = "Индексирование"   &&   ---------------
  Z[2] = "Копирование"      &&    Создание
  Z[3] = "Сортировка"       &&    Дополнение
  Z[4] = "Упаковка"         &&    Редактирование
  MENU BAR X, 3             &&   ---------------
  MENU 1, Y, 3
  MENU 2, Z, 4                   && Данными 3 командами меню описано
DO WHILE .T.
 READ MENU BAR TO i,j       && Активация меню, отображение на экране
 @ 24,0                                       && Очистка 24-й строки
 DO CASE
  CASE i = 1    && Имитация обработки; читатель понимает, что должно
 @ 24,1 SAY Y[j]+" ВЫПОЛНЕНО"    && быть обращение к блоку обработки
  CASE i = 2
 @ 24,1 SAY Z[j]+" ВЫПОЛНЕН" + Iif(j>2,"А","О")
  CASE i = 3
   EXIT
 ENDCASE
ENDDO
    Задание 19.3. Добавьте в программу примера 19.2 подменю 3-го
уровня с пунктами "Команда CREATE", "Команда CREATE DBF", включаемое
при выборе пункта "Создание базы" подменю "БАЗЫ: ".

       19.4. Осваиваем вертикальные dBASE-меню (POPUP-меню)

    Вертикальное dBASE-меню имеет вид прямоугольника, размещаемого
в заданном месте текущего или указанного окна (экрана). Если число
строк меньше числа пунктов меню, используется прокрутка. Главное
отличие от FOX-меню - в содержании пунктов и обработке выбора.
Обработка выбора может состоять в выполнении назначенной команды
(обычно - вызов блока обработки выбора) или активизации подменю.
Обработку выбора можно отложить и вообще выполнить "за рамками"
меню, поскольку информация о выбранном пункте (пунктах) сохраняется
и может быть получена с помощью соответствующих функций (см. п. 19.6).
    Пункты - строки произвольного содержания - описываются раздельно,
а если это имена файлов, компоненты открытых БД или имена полей
активной БД, пункты не описываются, а совокупно указываются в
команде описания меню (приводится типичная ее форма):
   DEFINE POPUP <Имя меню> TITLE<ВырC> FROM Y1,X1 TO Y2,X2 ;
                           PROMPT <Источник пунктов меню> ,
где <Источник пунктов меню> имеет следующие варианты записи:
 - STRUCTURE, представляет имена полей активной БД;
 - FIELD <Выр>, представляет поле БД или выражение с полями БД;
 - FILES LIKE<Маска>, представляет имена файлов в текущей или иной
директории, причем необязательная <Маска> позволяет задать диск, путь
(возможное начало <Маски>) и выделить подмножество имен файлов.
    Итак, кроме заданных произвольных строк, пункты меню могут быть
а)именами полей активной БД; б)значениями <Выр> для множества записей
БД (максимум 32767 записей); в)именами файлов. Сочетать их с 
индивидуально описанными пунктами в одном меню нельзя, но можно
сделать двухуровневое меню: в основном меню - индивидуально описанные
пункты и вызов подменю (см. п.19.5), а в подменю - "коллективно"
описанные пункты.
    Команда DEFINE POPUP должна быть первой среди команд описания меню.
Команда        ON SELECTION POPUP <Имя меню  или  ALL> <Команда>
задает реакцию на выбор любого из пунктов меню. "Индивидуальные" реакции
рассмотрим позднее. Если <Команда> не записана, это означает отмену
ранее назначенной реакции. Типичной реакцией на выбор является вызов
процедуры. Атрибут ALL означает реакцию на выбор пункта в любом
POPUP-меню.
    Активацию меню реализует команда ACTIVATE POPUP <Имя меню><Опции>,
деактивацию - клавиша Esc или команда DEACTIVATE POPUP (в ней имя меню
не требуется). В результате деактивации отображение меню исчезает и
управление переходит к команде, следующей за ACTIVATE POPUP по тексту.
Команда DEACTIVATE POPUP размещается в процедуре, вызываемой соответ-
ствующим пунктом меню. Занятая описаниями всех вертикальных меню
память освобождается командой CLEAR POPUPS. Деактивация уничтожаемого
меню не обязательна.
    Пример 19.3. Опишем подменю для случаев "а","б","в" (см. выше).
База Primer имеет поля Famil, Dtr (дата рождения), Pol (Пол).
Реакцию на выбор пунктов определим лишь для меню Struc - ею будет
индексирование активной БД по выбранному полю. В команде INDEX ON
функция Prompt() возвращает выбранный пункт (имя поля) в виде строки,
а функция Evaluate - работает как макроподстановка.
* ФАЙЛ  PRIMER.PRG
DO TriPup                      && Определение трех используемых меню
ACTIVATE POPUP Prog   && Для деактивации меню здесь используется Esc
USE Primer                                  && Открываем базу данных
ACTIVATE POPUP Struc        
ACTIVATE POPUP Basa    && Меню отображаются и используются поочередно
CLEAR POPUPS                               && Уничтожение всех 3 меню              
  PROCEDURE TriPup
  DEFINE POPUP Prog TITLE "Программы Кузькина:" ;
               PROMPT FILES LIKE A:\KUZKIN\*.PRG    && Все .PRG-файлы
  DEFINE POPUP Struc FROM 3,30 TITLE "   Имя поля:   " ;
                     PROMPT STRUCTURE          && Структура БД Primer
  DEFINE POPUP Basa FROM 1,55 TITLE "Фамилия        Дата рожд.  Пол" ;
                  PROMPT FIELD Left(Famil,15) + DTOC(Dtr) +" "+ Pol
  ON SELECTION POPUP Struc  INDEX ON Evaluate(Prompt()) TO InSt
* Примерный вид меню Struc и Basa:   --Фамилия     Дата рожд.  Пол--
*      --Имя поля--                    Кузькин      12/31/78    М
*        Famil                         Сидорова     10/25/78    Ж
*        Dtr                           Щукин        10/11/77    М
*        Pol                           Яковенко     11/10/78    Ж
*      ------------                  -------------------------------
    Окна в описаниях меню не указаны, поэтому координаты - экранные.
В описании меню Prog они вообще отсутствуют. Это означает, что Y1=X1=0;
во всех 3 меню по умолчанию X2 определяется максимальной длиной
пункта, Y2 - числом пунктов N, причем Y2max = 24, т.е. при большом N
используется прокрутка. Заголовок меню также не обязателен.
    Вертикальное меню с произвольными пунктами. Изучение команд
описания и активации меню завершим рассмотрением команды описания
пункта меню   DEFINE BAR <Номер> OF <Имя меню> PROMPT <ВырC> <Опции> .
Текст пункта задан строкой <ВырC>. Пункты размещаются согласно <Номерам>
и для "запаздывающих" пунктов резервируются пустые строки меню, если
только в описании меню не указана опция RELATIVE. При этой опции
пункты размещаются по порядку их описания командами DEFINE BAR, и
возможность изменить его дают лишь опции этих команд BEFORE<ВырN>,
AFTER<ВырN> ("перед пунктом <ВырN>", "после пункта <ВырN>").
    Пустые строки, если они остались в меню, не могут быть выбраны.
Прочие строки могут начинаться с "\" (запрет выбора, см. п. 19.1).
Запрет выбора обеспечивает также опция SKIP в описании пункта.
Опция SKIP FOR <ВырL> реализует условный запрет. Например, если
пункт предназначен для действий с БД, открытой в области "C", они
автоматически блокируются согласно описанию пункта с опцией 
SKIP FOR Empty(DBF("C")), когда БД нет. Функция DBF() возвращает имя БД,
открытой в заданной области, или пустую строку.
    Команда    ON SELECTION BAR <Номер> OF <Имя меню> <Команда>    
задает реакцию на выбор пункта, указанного <Номером>. Определение 
пункта должно предшествовать команде ON SELECTION BAR.
    Пример 19.4. Определим меню с 4 пунктами, причем 1-й - с запретом
на выбор, а 2-й и 3-й - с условным запретом, поскольку их действия
предполагают активную БД в области C. Запрет на выбор 1-го пункта
можно было сделать без опции SKIP, записав пункт как "\РАБОТА с БД:".
Пункт 3-й имеет комментарий (MESSAGE), для вывода которого по 
умолчанию используется 24-я строка. Блоки Sorti и Upak в примере не 
показаны. Вызов блока OpenBD уточнен именем файла Men, поскольку
данное меню будет использовано еще раз в другом окружении (п. 19.5).

* ФАЙЛ MEN.PRG
   SET TALK OFF
   DO CrMenu                           && Создание POPUP-меню Pmenu
   CLEAR
   ACTIVATE POPUP Pmenu
   RELEASE POPUPS Pmenu                   && Уничтожение POPUP-меню
PROCEDURE CrMenu
DEFINE POPUP Pmenu TITLE "Пробное меню"
DEFINE BAR 3 OF Pmenu PROMPT "Открытие (закрытие) БД" ;
  MESSAGE "База - в области C. Закрытие БД - Enter (без набора имени)"
ON SELECTION BAR 3 OF Pmenu  DO OpenBD IN Men 
  DEFINE BAR 4 OF Pmenu PROMPT "Упаковка"  SKIP FOR Empty(DBF("C"))
  DEFINE BAR 2 OF Pmenu PROMPT "Сортировка"  SKIP FOR Empty(DBF("C"))
  DEFINE BAR 1 OF Pmenu PROMPT "РАБОТА С БД:"  SKIP
ON SELECTION BAR 2 OF Pmenu DO Sorti    && Реакции на сделанный выбор
ON SELECTION BAR 4 OF Pmenu DO Upak
  PROCEDURE OpenBD
  @ 20,0           && Пользуемся командой, чтобы задать строку экрана
  ACCEPT "Введите имя базы данных" TO Imya  && Используется 21-я строка
  SELECT 3
  USE &Imya
  @ 21,0                                         && Очистка 21-й строки

    Общие опции команд DEFINE POPUP и DEFINE BAR "конкурируют" (кроме
опций KEY). Например, опция MARK <ВырC> устанавливает метку <ВырC>,
которой слева отмечается выбранный пункт (по умолчанию - ромбик) в
режиме множественного отбора. В описании меню назначается единый
символ <ВырC> для всех пунктов, но если в описании пунктов указаны
иные метки, то именно они и будут использоваться. Опция MESSAGE <ВырC>
определяет комментарий к меню в целом, который замещается
комментарием к выбранному пункту, если и в описании пункта дана
эта опция. Опция COLOR (см. п. 15.7) в DEFINE POPUP распространяет
действие лишь на те пункты меню, в описании которых нет такой же опции.
   В опции   KEY <Имя клавиши>,<ВырC>   назначается "горячая" клавиша
для вызова меню (пункта меню). <ВырC> указывают, если в меню ее
нужно обозначить сокращением <ВырC>, например сокращение ^End заменяет
Ctrl+End  (это <Имя клавиши>). Как и в системных меню, имя клавиши
или сокращение отображается в строке вертикального меню справа.
   Прочие опции команды DEFINE POPUP.  Опция MULTI устанавливает
режим множественного отбора (применяется только в меню, описанном
с использованием DEFINE BAR). В этом режиме, чтобы сохранить метку
у ранее выбранного пункта, придерживают клавишу Shift в момент
нажатия клавиши Enter для выбора следующего. При использовании режима
обычно не предусматривают "индивидуальную" реакцию на выбор пункта,
а обрабатывают итог выбора, выявляя выбранные пункты функцией
          MrkBar(<Имя меню>, <Номер пункта>),
которая возвращает .T. лишь для выбранных пунктов.
  По умолчанию меню размещается в окне выдачи (если оно есть, иначе
- на экране). Можно "адресовать" его другому окну опцией IN <Окно>
или вывести вне окна выдачи, указав IN SCREEN.
   Опция MARGIN обеспечивает пробелы справа и слева от текста пункта:
слева - для метки (иначе метка накладывается на 1-й символ), справа
- для вертикали, на которой обозначена относительная позиция маркера
на всем множестве пунктов меню. Вертикаль выводится, если задана
опция SCROLL и меню не умещается в окне (на экране).
   Опция FOOTER <ВырC> задает текст <ВырC>, размещаемый на нижней
границе меню, в разрыве рамки. В примере 19.4 можно было бы в этом
месте указать имя меню: FOOTER "Pmenu". Опции COLOR и SHADOW подобны
рассмотренным в п. 18.3.
    Опции команды ACTIVATE POPUP. Их всего четыре:
  AT Y1,X1   заменяет координаты Y1,X1, заданные явно или неявно
командой DEFINE POPUP;
  BAR <Номер>   назначает пункт меню, выделяемый маркером в момент
первоначального отображения меню;
  NOWAIT  отменяет приостановку программы, которая выполняется до
очередной команды, создающей состояние ожидания (тогда меню и
используется);
  REST   применяется, если в определении меню использована опция
PROMPT FIELD, и указывает, что выделяемый маркером пункт будет
соответствовать текущей записи БД (по умолчанию - первой записи).
    Уничтожение POPUP-меню и пунктов меню. Команды.
Набор команд, работающих с POPUP-меню, аналогичен набору команд
для работы с окнами: CLEAR POPUPS уничтожает все POPUP-меню, а
RELEASE POPUP <Список меню> EXTENDED   - только перечисленные в 
<Списке>; подчиненные им меню (подменю) уничтожаются, лишь если
указана опция EXTENDED. Сохранение подменю может иметь смысл,
поскольку существуют "горячие" клавиши их вызова. Уничтожение
меню может быть выполнено через окно команд и даже в другой
программе, которая могла также его использовать. 
    Команда  RELEASE BAR <Номер  или  ALL> OF <Имя меню>
уничтожает один указанный <Номером> или все (ALL) пункты
заданного меню.   Для скрытия меню применяется команда
HIDE POPUP <Список меню  или  ALL> SAVE.  Опция SAVE сохраняет
на экране нерабочий образ меню. Скрытие меню выполнимо лишь как
реакция на выбор пункта, подменю. Восстановление скрытого меню
выполняет команда  SHOW POPUP <Список меню  или  ALL>.  Если
меню определено, но не активировано, применение SHOW POPUP
выводит нерабочий образ меню без приостановки программы.
Команда MOVE POPUP <Имя меню> аналогична команде MOVE WINDOW.
    Задание 19.4. Реализуйте пример 19.4 на ЭВМ, составив
отсутствующие блоки Sorti и Upak. Опробуйте опции команды
активации и определения POPUP-меню.

      19.5. Изучаем горизонтальные dBASE-меню (BAR-меню).
                      
    Хотя пункты BAR-меню могут занимать на экране произвольное
положение, эти меню называют горизонтальными. Поскольку имеется 
аналогия средств описания вертикальных и горизонтальных меню, 
изложение будет кратким.  BAR-меню описывается командой
           DEFINE MENU <Имя меню> <Опции>,
после которой описываются пункты меню (PAD-пункты) командами
   DEFINE PAD <Имя пункта> OF <Имя меню> PROMPT<Выр C> <Опции> 
(заметим, что BAR-пунктами называют пункты POPUP-меню).
В отличие от POPUP-меню пункты обозначены не номерами, а именами
(для ссылок на них в других командах); <ВырC> представляет текст
пункта, используемый в BAR-меню.
   Подходя к построению иерархических меню, запомним общее правило: 
ссылаться можно только на имена (номера) ранее описанных пунктов, 
имена описанных меню. Этим определяется последовательность команд. 
Не запрещено чередовать команды описания различных меню. К моменту 
активации меню его описание должно быть полностью завершено.
   Опции команд описания. Если пункты меню выстроены в линейку, по 
горизонтали, описание упрощается. По умолчанию BAR-меню занимает 
нулевую строку окна или экрана. Для придания BAR-меню свойств 
системного меню в DEFINE MENU используют опцию  BAR  или  
BAR AT LINE <Номер>, указывая <Номер> строки для размещения меню. 
Если пункты располагают произвольно, в описании каждого дают опцию  
AT Y1,X1 с координатами левого края пункта. Опции IN<Окно> (IN SCREEN), 
KEY<Имя клавиши>, MARK, MESSAGE, COLOR в описании BAR-меню те же, 
что и в описании POPUP-меню. Опции в описаниях PAD-пунктов подобны 
опциям в описаниях BAR-пунктов (см. выше).
    Команды активации, деактивации, уничтожения, скрытия  BAR-меню
по своему действию не отличаются от команд для  POPUP-меню, а в их
записи слово POPUP(S) заменено на MENU(S), например CLEAR MENUS
- уничтожение всех BAR-меню. В команде ACTIVATE MENU <Имя меню>,
кроме опции NOWAIT, используется опция PAD <Имя пункта, выделяемого
маркером>.
    Реакция меню на выбор пунктов  оформляется аналогично тому,
как это сделано в POPUP-меню:
а) ON SELECTION MENU <Имя BAR-меню> <Команда>   && Обобщенная реакция
б) ON SELECTION PAD <Имя пункта> OF<Имя меню> <Команда>.
   Фактически, разница вариантов "а" и "б" может выразиться лишь
в "расфасовке" действий: в блок "обобщенной реакции" можно передать
номер Pad() выбранного пункта и уже внутри блока определять
индивидуальные реакции на выбор того или иного пункта.
    Вызов подменю из POPUP- и BAR-меню. Вызовы подменю аналогичны:
 ON BAR <Номер> OF <Имя POPUP-меню> <Команда активации подменю> ,
 ON PAD <Имя пункта> OF <Имя BAR-меню> <Команда активации подменю> .
С их помощью из POPUP- или BAR-меню можно вызывать меню любого из
данных классов.
    При выборе пункта в BAR-меню автоматически отображается и
закрепленное за этим пунктом вертикальное подменю. В отсутствие
координат в описании подменю последние автоматически размещаются под
соответствующими PAD-пунктами.
    Команду активации меню можно указывать как реакцию и в командах
ON SELECTION ... , в этом случае отображение подменю происходит
после нажатия Enter. При любом варианте подключения подменю его
закрепление за PAD- или BAR-пунктом можно отменить, выполнив команду
ON ... повторно без указания в ней команды активации подменю.
    Пример 19.5. Создадим двухуровневое меню DvuMe, заимствуя определения
вертикальных меню из примеров 19.3, 19.4:
 DEFINE MENU DvuMe
 DO TriPup IN Primer      && Создаем определения 3 вертикальных меню
 DO CrMenu IN Men    && Создаем определение вертикального меню Pmenu
 DEFINE PAD Progrm OF DvuMe PROMPT "Обзор программ"      
 DEFINE PAD Struct OF DvuMe PROMPT "Структура БД"
 DEFINE PAD BasaDn OF DvuMe PROMPT "Записи  БД"
 DEFINE PAD MenuBD OF DvuMe PROMPT "Работа с БД"
  ON PAD Progrm OF DvuMe ACTIVATE POPUP Prog      && Привязка подменю
  ON PAD Struct OF DvuMe ACTIVATE POPUP Struc     &&  к PAD-пунктам
  ON PAD BasaDn OF DvuMe ACTIVATE POPUP Basa
  ON PAD MenuBD OF DvuMe ACTIVATE POPUP Pmenu
 ACTIVATE MENU DvuMe
 RELEASE MENUS DvuMe EXTENDED          && Уничтожение  в с е х  меню
    Заметим, что команда открытия БД не предусмотрена. Это не ошибка:
условного запрета выбора пунктов, использующих БД (см. пример 19.4),
не сделано. При выполнении такого пункта автоматически предъявляется
окно Open, чтобы мы могли выбрать и открыть нужную БД.
    Запускаем программу, мы обнаружим неудобное расположение подменю
Struc и Basa; координаты жестко заданы в их описании. Попытка добавить
нужные координаты в команды активации успеха не дает (недоработка
используемой версии FOXPRO). Заменяем команды ON PAD, например
      ON SELECTION PAD Struct ACTIVATE POPUP Struc AT 2,17 .
Подменю располагаются на новых местах.
    Задание 19.5. Реализуя пример 19.5 на ЭВМ (с учетом последнего
изменения), опробуйте опции команд описания BAR-меню и команды 
активации меню. Опишите пункт меню для деактивации меню.

          19.6. Рассматриваем средства иерархических меню
    
    Функции регистрации активного меню и выбора. Так мы назвали 
функции, значения которых отражают текущую ситуацию в системе меню;
возвращаемые функциями строки содержат прописные буквы:
 Popup() ( Menu() ) возвращает строку с именем активного POPUP- (BAR-)меню; 
 Bar() ( Pad() ) возвращает номер (имя) выбранного пункта POPUP- (BAR-)меню;
 Prompt() возвращает строку - текст выбранного пункта активного меню 
(в иерархических меню - текст пункта, выбранного последним);
 MrkBar("<Имя POPUP-меню>", <Номер>) и MrkPad("<Имя BAR-меню>", 
"<Имя пункта>") возвращают .T., если заданный пункт указанного меню 
помечен как выбранный при множественном отборе;
 CntBar("<Имя POPUP-меню>") и  CntPad("<Имя BAR-меню>")  возвращают число
пунктов в указанном меню (номер последнего пункта в POPUP-меню).
   Указанные функции обычно используются в качестве фактических 
параметров в обращении к блоку обработки выбора или в команде реакции
на выбор, как это сделано в примере 19.3. Функции MrkBar(), MrkPad(),
CntBar(), CntPad() могут быть использованы при работе в других меню,
вне системы меню и даже в другой программе, если меню еще не уничтожены.
   Например, множественный отбор, осуществленный в одном меню, может 
быть основанием обработки данных в другом. Взаимосвязи меню в 
иерархической системе меню могут быть достаточно сложными. В частности,
результат выполнения или сам факт выполнения реакции на выбор в одном
меню может быть причиной разрешения (запрета) выбора в другом. 
Например, если не открыта БД, нельзя выполнять с ней действия.
   Кроме возможности формирования облика меню по условиям в 
определениях пунктов (например: DEFINE BAR ... OF ... PROMPT
Iif(B, "Порождение", "Расширение") ), которое происходит в момент
первоначальной активации меню, имеется возможность изменения облика
путем переопределения пунктов блоками обработки выбора в изменяемом
или ином меню: повторно выполняется команда DEFINE BAR.
   Имеются специальные команды разрешения (запрещения) доступа к меню
и пунктам меню: SET SKIP OF MENU <Имя меню> <ВырL> ,
                SET SKIP OF POPUP <Имя меню> <ВырL> ,
                SET SKIP OF PAD <Имя пункта> OF<Имя BAR-меню> <ВырL> ,
                SET SKIP OF BAR <Номер пункта> OF<Имя POPUP-меню><ВырL>,
которые обеспечивают доступ, только если <ВырL> = .F..  Включение этих
команд в блоки обработки выбора наделяет меню "элементами самосознания".
Снятие такой блокировки выполнят эти же команды, если в качестве <ВырL>
записать .F.. Напротив, запись .T. безусловно выключает доступ.
    Рассмотрим возможные варианты обработки выбора на примере POPUP-меню.
 а)"Разовый" выбор пункта предусматривается следующим описанием реакции:
          ON SELECTION POPUP <Имя меню> DEACTIVATE POPUP .
После активации меню и выполнения выбора оно сразу же деактивируется.
Предполагается, что обработка выбора идет в программе после команды
ACTIVATE POPUP. Для определения выбранного пункта используется функция
Bar() или Prompt().
 б)    ON SELECTION POPUP <Имя меню  или  ALL> DO <Имя блока> .
Все пункты указанного меню или каждого (ALL) меню, когда оно активно,
обрабатываются в одном блоке, где, кроме функций Bar() и Prompt(),
возможно использование функции Popup() для различения меню.
 в) Сочетание "унифицированной" и индивидуальной обработки выбора
пунктов (описывается после определения меню и его пунктов):
 ON SELECTION POPUP <Имя меню> DO <Имя "унифицированного" блока>
 ON SELECTION BAR 1 OF <Имя меню> DO <Имя блока1>  && Номера пунктов
 ON SELECTION BAR 2 OF <Имя меню> DO <Имя блока2>  && могут быть иными
 ON SELECTION BAR 3 OF <Имя меню> ACTIVATE POPUP . . .
Допустим, что для пунктов 4, 5 и т.д. обработка выбора индивидуально
не задана. Именно для них и предусмотрен "унифицированный" блок, не
используемый пунктами 1 - 3, имеющими отдельные назначения. По-прежнему
действует правило: более позднее указание - "сильнее".

                    ЗАКЛЮЧЕНИЕ К ГЛАВЕ 19

    Развитые изобразительные средства и, в частности, меню являются
сильной стороной FOXPRO. Ваша привязанность к FOXPRO несомненно 
окрепнет после некоторой практики в использовании меню. Рекомендуем 
вам сразу освоиться с dBASE-меню, как более прогрессивной их 
разновидностью. Не сожалейте о времени, потраченном на изучение 
FOX-меню: не исключено, что в чужой программе, которая вам интересна, 
они используются. Понимание их сути не помешает. 


                    2. ЗНАКОМИМСЯ С БАЗАМИ ДАННЫХ

     В этой главе мы осуществим первое знакомство с базами данных
(БД), типами используемых в БД полей, научимся создавать и изменять
БД, индексировать и чистить их от "мусора", устанавливать связи БД,
Эта глава послужит основой для более детального изучения БД в гл. 3.

           2.1. Типы полей, используемых в базах данных

     Рассмотрим конкретный пример применения БД в учетном столе
некоторой фирмы (к примеру, с числом сотрудников 500 - 600). Задачей
будет автоматизация учета служащих. Для начала разработаем модель
БД (аналог картотеки). Каждая карта в картотеке - это запись в
нашей БД, а каждый пункт в ней - "Имя", "Фамилия", "Отчество" и т.п.
- поле записи. Каждое поле получает уникальное имя.
     Размер и количество полей может изменяться в ходе эксплуатации
БД. Представляете, сколько требовалось бы работы, чтобы добавить ко
всем картам новое поле ? Или убрать ненужное поле, например, поле
"Партийная принадлежность"? А в БД эти операции выполняются двумя-
тремя командами. БД, имея специальный формат, хранятся в дисковой
памяти компьютера - каждая БД это файл с расширением имени .DBF .
     На всем множестве записей БД ("карточек") каждое поле имеет
жесткий размер и используется для данных определенного типа:
 - символьный тип (тип C) - содержит текстовую информацию (такие
поля можно использовать для хранения фамилии служащего, его адреса,
телефона и т.п.);
 - числовой тип (тип N) - числа с фиксированной запятой (такие поля,
поддающиеся числовой обработке, можно использовать для полей "Стаж",
"Зарплата" и т.п.); в языке FOXPRO числа могут быть с плавающей
точкой (тип F), это представление удобно для очень малых или слишком
больших чисел, например, 123E+9 обозначает число 123 000 000 000;
 - тип "Дата"(тип D) - даты в том или ином формате (п.1.3) (к таким
полям относятся поля "Дата рождения", "Дата приказа о зачислении");
 - логический тип (тип L) - поле с этим типом принимает логические
значения .TRUE. и .FALSE. (его можно задать, например, для поля
"Пол", определив мужской пол как .TRUE., а женский - как .FALSE.
или наоборот; конечно, можно использовать и поле типа C);
 - примечание (тип M) - это особый тип поля, объем данных которого
не оговаривается заранее, для разных записей может быть различным,
в том числе и 0, и может изменяться в процессе работы с БД (такое
поле может использоваться для хранения послужного списка, "досье").
     Поля последних 3 типов имеют фиксированный размер: тип D - 8,
тип L - 1, тип M - 10 (имеется в виду ссылка на данные типа M, сами
данные хранятся в отдельном файле, называемом Memo-файлом). Размер
символьного поля в языке FOXPRO ограничен 254 байтами, в CLIPPER -
64 K, т.е. больше в 256 раз с небольшим. Максимальный размер поля
типа N или F - 20 (учитывается знак числа и возможная десятичная
точка).
     Для обработки полей могут использоваться операции и функции,
рассмотренные в пп. 1.2 - 1.6, для ввода и вывода - команды,
рассмотренные в пп. 1.11, 1.12.

           2.2. Создаем первую базу данных. Структура

     Имя БД - это имя файла, состоящее из латинских букв и цифр (до
8 символов без учета расширения имени). Имя поля включает до 10
таких символов и начинается с буквы. Возьмем упоминавшуюся выше
личную карту сотрудника и разработаем на ее основе структуру БД с
именем  Kadr:
┌─────────────────────────────────────────────────────────────────┐
│ Поле             Тип          Длина            Содержание       │
├─────────────────────────────────────────────────────────────────┤
│ Famil             C            30           Фамилия сотрудника  │
│ Imya              C            20           Имя сотрудника      │
│ Otch              C            20           Отчество сотрудника │
│ Pol               L             1           Пол сотрудника      │
│ Oklad             N             8           Заработная плата    │
│ Dtr               D             8           Дата рождения       │
└─────────────────────────────────────────────────────────────────┘
     В данной структуре не отражена 4-я составляющая - число знаков
после точки в числе. В нашем примере числовое поле не имеет дробных
разрядов, а в описании полей иных типов эта составляющая равна 0.
     Создание пустой БД. Запись структуры БД в ЭВМ приводит к созданию
пустой БД. Проще всего это делается с помощью программы-утилиты
DBU.EXE , прилагающейся к системе CLIPPER. После запуска программы
нужно выбрать из меню на экране пункт "Создать-Структуру". Появляется
пустой шаблон описания поля. Вводим имя поля, а в следующей колонке -
выбираем тип (сначала она содержит тип Character - символьный). Можно
заменить тип на нужный, нажимая клавишу пробела. Затем назначаем
размер поля, если он отличается от уже имеющегося в колонке "Ширина".
Сделав это для всех полей, получаем следующее:
            ╒════════════════════════════════════════╕
            │   Структура Базы Данных <новый файл>   │
            │                             Поле 5     │
            │   Имя поля     Тип поля    Ширина  Дес.│
            ╞════════════════════════════════════════╡
            │   FAMIL        Character      30       │
            │   IMYA         Character      20       │
            │   OTCH         Character      20       │
            │   POL          Logical         1       │
            │   OKLAD        Numeric         8    0  │
            │   DTR          Date            8       │

     Колонка "Дес" содержит указание количества знаков в числе
после десятичной точки. Теперь необходимо сохранить структуру БД
на диске. Выбираем пункт меню "Сохранить-Структуру" и в появившемся
окне ввода
           ╒═══════════════════════════════════════════╕
           │ Сохранение структуры базы   --- *.DBF --- │
           │                                           │
           │  Файл                                     │
           │                                           │
           │       Да          Отменить                │
           ╘═══════════════════════════════════════════╛
справа от слова "Файл" набираем имя  Kadr, завершая сохранение
двойным нажатием клавиши Enter, ибо утилита требует подтверждения.
     Заполнение БД данными. Выбираем пункт меню "Просмотр-Базы", на
экране появляется окно ввода с заголовочной частью
╒╘═══════════════════════════════════════════════════════════════╕
│     <Замена>                           Запись 1/1              │
│FAMIL          IMYA         OTCH          POL    OKLAD    DTR   │
├────────────────────────────────────────────────────────────────┤

Как только начинаем набирать фамилию первого сотрудника,
автоматически появляется курсор в поле набора фамилии. Нажимая Enter,
переходим к следующему полю IMYA и т.д. Для перехода к следующей
записи служит клавиша "Стрелка вниз".
      Создание БД из среды FOXPRO. Запускаем на выполнение программу
FOX.EXE, на экране появляется основное меню. Клавиша F10 активизирует
меню. Выбираем пункт File/New (сначала File, затем New - в подменю),
в появляющейся таблице уже выбрана (обозначена точкой . )  строка
"Database".  Перевод трех выбранных элементов:   "Файл/Новая/БД".
При нажатии Enter появляется окно Structure с заголовком следующего
вида:
    Structure:   Untitled
          Name          Type        Width  Dec        Field
    ┌─────────────────────────────────────────┐   ┌────────────┐
    │                                         │   │  <Insert>  │
    │                                         │   │  <Delete>  │

     Набираемые имя поля (колонка Name), его тип (Type), его размер
(Width) займут 1-ю строку под соответствующими надписями. В колонке
Type надо вводить лишь 1-ю букву. Например, при вводе буквы N
возникает слово Numeric. Переход к следующей (предыдущей) колонке
производится клавишами управления курсором. Можно использовать клавишу
табуляции, клавишу Enter. После заполнения строки курсор переходит
на следующую. Закончив описание полей БД, идентичное производимому
в среде DBU и показанному выше, нажимаем CTRL + W и в нижней строке
появившегося окна записываем имя БД: Kadr. Затем клавишей табуляции
выбираем в окне элемент Save ("Сохранить") и нажимаем Enter. Пустая
БД создана. Остается ответить на появляющийся на экране запрос:
                  Input data records now ?
                  <Yes>               <No>
Для выбора ответа <No> клавишей "стрелка вправо" переходим к нему
и нажимаем Enter. Если необходимо сразу заполнить БД, выбираем Yes
(нажимаем Enter). В возникающем окне ввода, где указаны имена полей
БД, набираем значения. Поле значения контрастно выделяется. После
ввода первой записи автоматически появляется доступ ко 2-й и т.д.
Для сохранения наполненной БД используются клавиши  CTRL + W .
    Если вы откажетесь заполнять БД, можно сделать это впоследствии,
открыв БД и выбрав элемент меню "Database/Browse".  Конечно, для
некоторых пользователей английские обозначения и тексты окажутся
неудобством в сравнении с русскими, используемыми в среде DBU.
     Всю описанную выше работу можно проделать, не входя в меню, а
набрав команду CREATE Kadr, которая предъявляет окно Structure.
Команда MODIFY STRUCTURE, которая также его предъявляет, позволяет
изменить структуру предварительно открытой БД. Открытие БД
рассматривается в пп. 2.3, 2.4. Работая в окне Structure, можно
изменять порядок следования описаний полей, вставлять (удалять)
описания, выбирая элемент <Insert> (<Delete>).
     Задание 2.2. 1.Создайте и наполните БД Kadr (несколько записей).
 2.Разработайте структуру БД Postavki с информацией о поставщиках.
Запись должна включать наименование фирмы-поставщика, ее телефон и
факс, фамилию и инициалы представителя, адрес, число заключенных
договоров о поставке, дату последнего из них. Оцените размер одной
записи и подсчитайте приблизительный объем БД в расчете на 1000
поставщиков.

         2.3. Активизируем базу данных и перемещаемся в ней.
                      Закрываем базы данных

     Доступ к записям для чтения или изменения их содержимого
возможен с момента открытия БД командой  USE <Имя БД>. В каждый
момент доступна лишь текущая запись БД. Положение текущей записи
определяет указатель записи (ему соответствует значение функции
Recno()). После открытия БД текущей является первая запись. Команда
GO <ВырN>, изменяя указатель записи, делает текущей запись с номером
<ВырN>, команда  GO BOTTOM - последнюю запись БД, команда  GO TOP
- первую запись.
     Положение новой текущей записи можно задать относительно
прежней командой  SKIP <ВырN>, где <ВырN> - приращение номера записи
(может быть отрицательным). Например, SKIP 5 перемещает указатель
на 5 записей "вперед", SKIP 1 (SKIP -1) - на соседнюю запись с
большим (меньшим) номером. Команду  SKIP 1  можно писать короче:
SKIP. Команда SKIP удобна при последовательной обработке записей.
     Существуют две функции (EOF() и BOF()), которые имеют значение
.F., пока указатель записи перемещается в пределах БД. При выходе
за последнюю запись БД функция EOF() изменяет свое значение на .T.,
а функция Recno() возвращает значение (n+1), где n - число записей.
При попытке выхода за начало БД   значение .T. приобретает функция
BOF(), а значение Recno() - равно 1.
     Функция Reccount() возвращает число записей в открытой БД.
     Пример 2.1. Нам потребуется БД  Prima  с единственным числовым
полем Numb. Создайте и заполните ее таким образом, чтобы значения
поля шли по возрастанию от начала к концу БД.
     Найдем в БД Prima запись со значением, равным заданному
значению Z, или - в отсутствие равного значения - с ближайшим
большим значением. Применим широко используемый метод дихотомии.
  INPUT "Введите значение Z  " TO  Z
  USE Prima                               && Открываем базу данных
   I = 1                          && Нижняя граница области поиска
   J = Reccount() + 1            && Верхняя граница области поиска
   K = Int((I+J)/2)                && Средняя точка области поиска
   GO K            && Переход к "центральной" записи области поиска
    DO WHILE J > I
     IF Numb > Z     && Проверка значения поля "центральной записи"
        J = K              && Замена верхней границы области поиска
     ELSEIF Numb < Z
        I = K+1             && Замена нижней границы области поиска
     ELSE
        EXIT      && Выход из цикла, если найдено равное Z значение
     ENDIF
    K = Int((I+J)/2)     && Нахождение средней точки области поиска
    GO K           && Переход к "центральной" записи области поиска
    ENDDO
  ? Recno(), Numb  && Вывод номера найденной записи и значения поля
    Если искомое значение оказывается больше всех имеющихся в БД,
указатель записи устанавливается в позицию  (Reccount()+1). Зная,
что после открытия БД текущей является 1-я запись, мы могли бы
команду  GO K  в 6-й строке программы заменить командой SKIP.
    Команда USE без параметров закрывает активную БД. Кроме того,
закрыть БД вместе со всеми сопутствующими файлами можно командой
CLOSE <Имя БД>, а команда CLOSE DATABASES закрывает все открытые БД.
    Задание 2.3. Выведите записи БД Prima последовательно, начиная
с конца БД. Управление циклом вывода осуществите с помощью  BOF().

         2.4. Используем несколько баз данных. Фильтры

     В реальных задачах, как правило, оперируют с несколькими БД,
причем некоторые из них используются на одном и том же отрезке
времени, будучи открытыми. Однако лишь одна из открытых БД может
быть активной, именно в ней выполняются команды GO, LIST  и т.д.
Активными БД могут становиться только по очереди. В FOXPRO (версия
2.5 и выше) одновременно могут быть открытыми до 225 БД, в языке
CLIPPER 5.01 - до 250 БД пользователя. Открываем каждую БД командой USE.
     СУБД поддерживает иллюзию непосредственной работы со всей БД.
На самом деле, для обработки записи БД вызываются в рабочую область
оперативной памяти. Поэтому, если БД открыта в двух или более
рабочих областях (делать это не рекомендуется), изменения записей,
произведенные в одной области, могут не проявиться в другой. Просто
часть измененных записей еще не перешла из рабочей области в файл
БД и поэтому в других областях они окажутся в исходном виде. При
закрытии рабочей области (фактически команды, указанные в конце
п. 2.3, действуют на рабочую область) ее содержимое переписывается
в файл БД, а занятая ею память освобождается.
     Каждая открытая БД имеет свою рабочую область. Если же вы,
открывая очередную БД, не укажете новую область, она откроется в
текущей области, автоматически закрывая активную БД.
     Рабочие области обозначаются номером или латинской буквой,
начиная с буквы A; в FOXPRO 11-я - 25-я области обозначаются как
W11-W25. Рабочей области можно приписать имя - алиас ("псевдоним"),
не совпадающее с вышеуказанными обозначениями областей, указав его
в команде USE. В отсутствие псевдонима в качестве алиаса
используют имя БД. Например, добавляя в конец команды SKIP атрибут
ALIAS <Псевдоним или имя БД>, можем выполнять перемещения и не в
активной рабочей области. Допустим также атрибут ALIAS <Номер
области>, например,  SKIP -1 ALIAS 1.
     Задание или переключение областей выполняет команда  SELECT <Обл>.
Область <Обл> становится текущей. Если ранее в ней была открыта БД,
эта БД становится активной. Аргумент <Обл> задают как номер (возможно
числовое выражение в скобках) или алиас. Команда SELECT 0 делает
текущей первую свободную рабочую область. Какое-то время текущая
область может не быть присоединенной к БД.
     Пример 2.2. Откроем три БД в областях 1 - 3 ("A" - "C").
  USE Kadr && По умолчанию 1-я команда USE открывает БД в области 1
  SELECT 2                            && Возможна команда  SELECT 0
  USE Postavki               && БД Postavki открывается в области 2
  SELECT 3                            && Возможна команда  SELECT 0
  USE Finance ALIAS Ra        && БД Finance открывается в области 3
  SELECT 1               && Переключение на рабочую область БД Kadr
* Активна БД Kadr; БД Postavki и Finance также открыты, но пассивны
* Рабочая область 3 (область C) может обозначаться также алиасом Ra
     Переключение областей не влияет на положение указателей в БД.
Для обработки доступны поля текущих записей открытых БД, но если
для доступа к записи активной БД достаточно имени поля, то при
использовании записей пассивных областей имя поля должно уточняться
квалификатором - буквенным обозначением рабочей области или алиасом.
Квалификатор записывают слева от имени поля, отделяя его знаками ->.
В FOXPRO разделителем может быть также точка.
     Обращаясь к примеру 2.2, запишем обозначение поля  Data БД
Postavki и поля Credit БД Finance: B->Data, C->Credit или
Ra->Credit. В FOXPRO удобнее обозначать так: B.Data, C.Credit или
Ra.Credit .
║ Не забывайте уточнять квалификатором имена полей БД, в том
║числе активной БД, стоящие слева от знака присваивания, иначе они
║будут восприняты как обозначение переменных.
     В CLIPPER квалификатор также используют для уточнения взятых в
скобки выражений с именами полей или функциями БД. Например,
уточненное выражение Ra->(Reccount()) возвращает число записей в
пассивной (открытой) БД Finance. В языке FOXPRO функции БД могут
иметь аргумент, указывающий область, например: Reccount("Ra").
     Фильтры. Если для решения задачи в БД требуется выделение и
обработка подмножества записей, прочие записи можно сделать
"невидимыми", назначив фильтр. Фильтр назначается, когда БД активна,
и действует до ее закрытия или до выключения фильтра.  Команда
SET  FILTER  TO  <ВырL>  задает условие фильтрации <ВырL>, которое
должно быть истинно лишь для записей обрабатываемого подмножества.
При переключении рабочих областей фильтр сохраняется; на другую БД
его действие не распространяется, но каждая открытая БД может иметь
свой фильтр. Команда SET FILTER TO (без аргумента) прекращает
действие фильтра активной БД.
  Пример 2.3.
  Выведем список мужчин-сотрудников, указанных в БД  Kadr.
  USE Kadr
  SET FILTER TO  Upper(Pol) =="МУЖ"
  LIST Famil, Otdel && Команда LIST обеспечивает движение по БД и вывод
  SET FILTER TO                                   && Выключение фильтра
     Фильтр начинает действовать  п о с л е  любого перемещения
указателя в БД. Обычно это осуществляют командой  GO TOP, которая
ставит указатель на первую запись, удовлетворяющую условию
фильтрации (GO BOTTOM ставит его на последнюю такую запись).
Команда LIST и другие команды с неявным циклом обработки записей
сами выполняют необходимое начальное перемещение указателя записи.
     Действующее условие фильтра можно запомнить, используя функцию
FOXPRO  FILTER (<Обл>), где <Обл> - номер рабочей области или алиас,
или функцию CLIPPER  DBFilter(), уточняемую при необходимости алиасом
или буквенным обозначением рабочей области, например: B -> ( DBfilter()).
Обе функции возвращают условие фильтрации в виде строки символов.
При очередном назначении этого фильтра используется макроподстановка.
     Задание 2.4. Откройте БД Kadr, созданную вами при выполнении
задания 2.2, и Prima (пример 2.1), сделав текущими последние записи
БД. Выведите одной командой содержимое этих записей. Установите фильтр
и выведите соответствующее подмножество записей БД Kadr.

                  2.5. Индексируем базы данных

     Обратимся к содержимому БД Kadr. Допустим, фамилии сотрудников
идут не по алфавиту: Куприянов, Али-Бабаевич, Филимонина, Иванов,
Беднякова, Абдухатабова. Не изменяя БД Kadr, можем задать нужный
порядок доступа к записям, построив следующий индекс ("оглавление"
БД):
            Абдухатабова  │  6  │
            Али-Бабаевич  │  2  │
            Беднякова     │  5  │ <-- н о м е р а   з а п и с е й
            Иванов        │  4  │          (с с ы л к и)
            Куприянов     │  1  │
            Филимонина    │  3  │
     При включенном индексе команда SKIP вызывает переход к следующей
по индексу записи (см.выше: от 6-й ко 2-й, от 2-й к 5-й и т.д.)
Команда GO TOP вызывает переход к записи, указанной первой в индексе,
команда GO BOTTOM - к записи, указанной в нем последней. Команда
GO <Номер>  работает попрежнему. Для вывода записей в новом порядке
достаточно иметь в индексе их номера, но для быстрого поиска
по фамилии надо хранить и сами фамилии. Поле записей или выражение
с именами полей, определяющее порядок в индексе, называют ключом
индекса, индексным выражением. В нашем примере это Famil.
     Индекс записывается в отдельном от БД индекс-файле, имеющем
расширение .IDX и может использоваться длительное время в различных
задачах. Поскольку в разных случаях обработки БД оказывается
необходимой ее упорядоченность по разным ключам, может быть создано
несколько индексов. Создание индекса производится, когда БД является
активной, а его использование - при любом состоянии открытой БД.
     Например, может понадобиться упорядоченность сотрудников по
возрасту. Тогда в качестве ключа возьмем поле Dtr, причем "закажем"
убывающую последовательность дат. В качестве ключей индекса
допустимы поля (выражения) разных типов, кроме логического.
     Построить индексный файл можно командой
        INDEX ON <Ключ> TO <Имя индексного файла>  UNIQUE ;
атрибут UNIQUE не обязателен. Его используют, если из каждой группы
записей с одинаковым значением ключа лишь одна, первая, должна
включаться в индекс. Доступ к прочим записям такой индекс не
обеспечивает. Обязательные части команд мы и далее будем выделять.
     Пример 2.3. Проиндексируем БД Kadr по полю Dtr (дата рождения):
    INDEX ON Descend(Dtr) TO Birth           (вариант для CLIPPER);
    INDEX ON Dtr TO Birth  DESCENDING         (вариант для FOXPRO) .
Функция Descend() или атрибут DESCENDING обеспечивают убывающую
последовательность значений ключа в индексе.
     Поскольку в БД возможны изменения ключей (например, заменяется
девичья фамилия) и добавление записей, требуется корректировка
индекса (поддержание упорядоченности). Это делается автоматически для
всех открытых индексов, т.е. указанных в одной из команд
       USE <Имя БД> INDEX <Список индексов> ,
       SET INDEX TO <Список индексов> .
Последняя из них открывает индексы уже после того, как открыта БД.
     Индексы получают номера согласно положению в списке. Лишь один
из открытых индексов может быть ведущим, управляющим. Вначале это
первый по списку индекс. Именно ведущий индекс определяет порядок
доступа к записям. Команда INDEX ON  делает ведущим (и разумеется,
открытым) создаваемый ею индекс, закрывая ранее открытые индексы
(в FOXPRO есть альтернатива такому решению).
    При назначении ведущего индекса вышеуказанными способами
текущей становится запись, указанная первой в данном индексе.
     Ведущий индекс заменяется другим открытым индексом по команде
 SET ORDER TO <ВырN>, где <ВырN> указывает номер нового ведущего
индекса. Команда SET ORDER TO без аргументов вообще отменяет ведущий
индекс; рабочей последовательностью становится последовательность
физического размещения записей в БД. При переключении и отключении
ведущего индекса указатель текущей записи сохраняется.
Установку его на новую начальную запись делайте командой GO TOP.
     Пример 2.4. Выведем фамилии сотрудников (с именем, датой
рождения) в последовательности убывания возраста сотрудников:
   USE Kadr                 && Индексировать можно лишь активную БД
   INDEX ON Dtr TO Birth
   LIST Trim(Famil), Imya, Dtr     && Функция Trim позволяет убрать
                          && лишние пробелы между фамилией и именем
     Получаем на дисплее список:
     RECORD#  TRIM(FAMIL)    IMYA     DTR
           1  Куприянов      Филимон  12/05/63
           2  Али-Бабаевич   Василий  01/01/65
           6  Абдухатабова   Федотья  06/11/67
           5  Беднякова      Марина   05/10/69
           4  Иванов         Иван     01/11/70
           3  Филимонина     Анна     12/12/74

     Если изменяя (дополняя) БД, вы забыли открыть индексы, командой
REINDEX их можно воссоздать с учетом сделанных изменений в БД. Иногда
индексы отключают намеренно, считая более целесообразным применить
REINDEX после изменения группы записей. При работе с большими
БД стараются избегать применения команды REINDEX  из-за ощутимых
затрат времени на воссоздание индексов.
     Команда REINDEX нужна и по той причине, что при сбоях
оборудования, при бросках напряжения в сети, случайном отключении ЭВМ
обычно страдают индексы. Их приходится восстанавливать.
     Задание 2.5. Трижды вывести список фамилий из БД Kadr, делая
поочередно ведущим индексом БД Kadr индекс Fml (упорядоченность по
фамилиям), Birth (упорядоченность по датам рождения) и Okl
(упорядоченность по размеру заработной платы). Перед каждым списком
выводите ключ индекса.

             2.6. Модифицируем структуру базы данных.
                       Связи баз данных

     В процессе эксплуатации БД приходится их дополнять не только
новыми записями, но нередко и новыми полями, изменяя структуру БД.
Иногда целесообразно поместить новые данные в отдельную БД. Допустим,
есть категория сотрудников, чей адрес желательно иметь в БД Kadr.
Если их число невелико в сравнении с числом записей, нерационально
добавлять поле с адресом; оно часто будет пустовать. Уменьшить
расход памяти (и времени на обработку, которое зависит от размера
записи) можно, поместив данные об адресах в отдельную БД Addr.
     Для соответствия между записями БД Kadr и записями БД Addr,
добавим в те и другие поле TabNum ("табельный номер") с уникальным
для каждого сотрудника значением. Итак, мы хотим изменить структуру
БД Kadr. Рассмотрим, как это делается утилитой DBU.EXE .
     Запускаем программу DBU и в появившемся меню выбираем элемент
"Открыть/Базу", в таблице БД выбираем БД Kadr, дважды нажимаем Enter.
На экране фиксируется БД Kadr. Теперь выбираем пункт "Создать/Структуру",
и появляется окно с описанием структуры. Добавляем описание символьного
поля TabNum и выбираем элемент "Сохранить/Структуру". При положительном
ответе на вопрос "Изменять имена полей БД?"   БД Kadr воспроизводится с
новой структурой записи. Осталось заполнить поле TabNum в режиме
просмотра БД. Выбираем элемент меню "Просмотр/Базы".
     Изменение структуры БД в FOXPRO. В среде FOXPRO выбираем
элемент меню "Database/Setup", и FOXPRO предъявляет список БД для
выбора. Выбираем Kadr.dbf и нажимаем Enter, появляется уже знакомое
нам окно Structure. Переводим курсор в первую незаполненную строчку
описания полей и вводим в нее описание поля TabNum. Нажимаем CTRL+W,
на экране возникает вопрос     "Make structure change permanent?"
Ответим "Yes", чтобы закрепить изменение структуры. БД
воспроизводится с новой структурой. Для заполнения БД можно выбрать
элемент меню "Database/Browse".
     Связь "одна-к-одной" или "1:1". Создадим структуру БД Addr,
включающую поля TabNum и Address, наполним БД Addr и перейдем к
установлению связей БД. Каждой записи БД Kadr будет соответствовать
лишь одна запись в БД Addr. Связь "1:1"  устанавливается командой
          SET RELATION TO <Список связей> ADDITIVE,
причем необязательный атрибут ADDITIVE пишется, если устанавливаемые
связи дополняют прежний перечень связей, иначе прежние связи
аннулируются. Элемент списка связей имеет вид
             <Ключевое выражение> INTO <Обл> ,
<Ключевое выражение> - это обычно поле, используемое для связи (у
нас - TabNum). <Обл> обозначает рабочую область подчиненной,
"дочерней" БД по отношению к активной БД, называемой в данном случае
"материнской". У нас материнской БД является БД Kadr, а дочерней -
БД Addr. Дочерняя БД должна быть открыта и в обязательном порядке
проиндексирована по ключу (в нашем случае - по полю TabNum). Теперь
при изменении указателя записи в материнской БД, указатель записи
в дочерней БД автоматически перемещается на соответствующую запись,
если она есть и найдена неявно выполняемой командой поиска SEEK.
При этом функция Found() получает значение .T., иначе - .F..
     Пример 2.5. Выведем фамилии сотрудников из БД Kadr с указанием
адреса, если адрес данного сотрудника хранится в БД Addr.

* Вариант для языка CLIPPER, в FOXPRO последняя команда должна
* иметь вид      LIST Famil, Iif( Found("Addr"),Addr->Address, "")
  USE Addr
  INDEX ON TabNum TO Tbnm
  SELECT 0   && Если мы пропустим SELECT, БД Addr окажется закрытой
  USE Kadr
  SET RELATION TO TabNum INTO Addr   && Имя БД используем как алиас
  LIST Famil, Iif(Addr->(Found()), Addr->Address, "")

    Команда LIST работает с активной БД Kadr, осуществляя перемещение
указателя записи. Автоматически перемещается указатель и в дочерней
БД. Если в ней обнаруживается адрес сотрудника, то функция Found()
для дочерней области принимает значение .T., когда же ее значение
.F., выводим взамен адреса пустую строку.
     Команду LIST можно записать проще:  LIST Famil, Addr->Address.
Дело в том, что при отсутствии нужного адреса в дочерней области
указатель записи устанавливается на фиктивную запись с номером
(Reccount() + 1) - так работает команда SEEK при неуспешном поиске.
Читать эту запись не запрещается. Все ее поля - пустые. В этом
варианте команды LIST поле Address выводится всегда (хотя бы и
пустое значение).
     Связь "одна-ко-многим" или "1:N". Если в БД необходима
информация о детях сотрудников, есть все основания выделить ее во
вспомогательную БД  Deti, ибо она имеет переменный объем (возможно,
нулевой). В БД Deti записью будут сведения об отдельном "потомке".
Если сотрудник имеет несколько детей, то несколько записей БД Deti
будут иметь одинаковый номер TabNum. В БД, проиндексированной по
полю TabNum, эти записи идут последовательно. Поэтому первым шагом
при установлении связи "1:N" является установление связи "1:1".
     Пример 2.6. Создадим БД Deti с полями Famil, Imya, Pol, Dtr,
TabNum (можно скопировать структуру БД Kadr и удалить описание
поля Oklad) и внесем в нее некоторые данные о детях так, чтобы не
все табельные номера TabNum из БД Kadr были представлены в БД Deti.
     Выведем все фамилии из БД Kadr с указанием имен детей
(используем БД Deti) или со словом "бездетный". Воспользуемся
предусмотренной в языке CLIPPER возможностью применять команду
SKIP в пассивной области, заданной алиасом. Ниже дан вариант для
языка CLIPPER.
  USE Deti
   INDEX ON TabNum TO Tb
  SELECT 0
  USE Kadr
   SET RELATION TO TabNum INTO Deti
   DO WHILE .NOT. EOF()      && "ДЕЛАЙ ПОКА НЕ закончится файл БД"
   ? Famil, Iif(Deti->(Found()),"Дети: ","Бездетный")
* Следующий цикл реализует связь типа "одна-ко-многим"
     DO WHILE TabNum = Deti->TabNum
      ?? Deti->Imya + " "
      SKIP ALIAS Deti       && Переход к следующей записи в БД Deti
     ENDDO
   SKIP                     && Переход к следующей записи в БД Kadr
   ENDDO
     Во внутреннем WHILE-цикле мы не проверяем выход за границу
файла Deti, ибо знаем, что при выходе из файла читается фиктивная
запись с пустым значением TabNum.
     В языке FOXPRO связь "1:N" также требует предварительного
установления связи "1:1", но реализуется специальной командой
            SET SKIP TO <Список дочерних областей>  .
     Элементом списка дочерних областей может быть любое обозначение
области. Рассмотрим вариант программы примера 2.6 для FOXPRO:
  USE Deti
   INDEX ON TabNum TO Tb
  SELECT 0
  USE Kadr
   SET RELATION TO TabNum INTO Deti
   SET SKIP TO Deti
   LIST Famil, Iif(Found("Deti"),"Дети: ", "Бездетный"), Deti->Imya

     Программа стала короче, но при выводе номер записи, фамилия и
строка "Дети: " повторяются для каждого ребенка, что неудобно. Эти
повторы можно исключить, используя команду BROWSE вместо LIST.
     При включенной связи БД темп прохождения материнской БД
уменьшается, поэтому связи надо отключать, когда их надобность
исчезает.Команда SET RELATION TO без параметров  разрывает все связи
БД. В FOXPRO имеется возможность устранения отдельных связей командой
              SET RELATION OFF INTO <Дочерняя область> ,
<Дочерняя область> может быть любым допустимым обозначением области.
     Связь по номеру записи. Дочерняя область может не быть
проиндексированной в одном лишь случае: когда ключевое выражение -
числовое. Это означает, что по содержимому "материнской" записи
вычисляется номер записи в дочерней БД для использования в неявной
команде  GO <Номер>. Функция Found() при этом не работает, а
программист сам должен контролировать возможность выхода за пределы
дочерней БД.
     Например, вместо БД с записями большого размера сделаны две
или несколько БД меньшего объема так, что в совокупности данные их
записей, имеющих один номер, соответствуют данным одной записи
исходной БД. Такой "вертикальный" разрез таблицы данных может быть
сделан под задачи, использующие данные лишь одной из полученных БД,
с целью ускорения обработки данных. Если же возникают задачи,
использующие данные двух или нескольких из этих БД, мы устанавливаем
связь этих БД по номеру текущей записи, используя выражение Recno().
     Задание 2.6. 1. Установите связь материнской БД Kadr сразу с
двумя БД: Addr и Deti. Осуществите вывод данных о фамилии, адресе
и детях сотрудника (их имена) так, чтобы под адресами в других
строках, где адреса нет, не оказывались имена детей.
  2. Создайте новую БД Gabarit, содержащую данные о весе (поле Ves)
и росте (поле Rost) каждого сотрудника, учтенного в БД Kadr, с
целью опробования связи двух БД по номеру. Выводите одной строкой
данные о сотруднике из этих двух БД.

                    2.7. Удаляем ненужные записи

     Насколько часто приходится добавлять в БД новые записи, настолько
часто приходится обычно их и удалять. Если добавление записи не такой
уж сложный и длительный процесс, то этого не скажешь об удалении.
Дело в том, что для физического изъятия записи из БД приходится
переписывать на новые места следующие за ней записи (уплотнять  или
"упаковывать" БД). Это требует ощутимых затрат времени. Уплотнение
БД поэтому производят, когда наберется достаточное число удаляемых
записей, например, в конце сеанса работы с БД. Предварительно эти
записи помечаются, чтобы можно было при обработке БД исключать их
из рассмотрения. Итак, удаление записей реализуется в два этапа.
     Этап 1. Снабжаем записи пометками на удаление.  При просмотре
БД в среде DBU нажимаем клавишу Del, когда курсор находится в строке
удаляемой записи. Повторное нажатие Del снимает пометку.
     В FOXPRO в окнах редактирования БД наводим курсор на требуемую
строку и нажимаем клавиши CTRL + T. Альтернатива: в командном окне
FOXPRO или в программе (FOXPRO и CLIPPER) используют команду DELETE,
чтобы пометить текущую запись на удаление. Снимают пометку текущей
записи командой RECALL (представьте, что речь идет о БД Kadr;
уволенный сотрудник восстановлен на работе через суд).
     Чтобы программным путем пометить множество записей (снять с
них пометки), записываем в команде DELETE (команде RECALL) область
ее действия или условие, которому должны удовлетворять исключаемые
записи (или то и другое). Форму такой записи команды вы узнаете
при рассмотрении структуры команд в п. 3.3.
     Этап 2. Физическое удаление помеченных записей. В среде DBU
выбираем в меню элемент "Сервис/Сжать" и нажимаем Enter. В среде
FOXPRO выбираем в меню элемент "Database/Pack" и нажимаем Enter. В
любом случае предварительно нужно открыть БД.
     Для уплотнения БД программным путем предназначена команда Pack.
В языке CLIPPER она уплотняет лишь .DBF-файлы, в FOXPRO -  и .DBF-
и Memo-файлы. Она вполне годится для "неответственных" применений,
например, в учебном процессе. В п.3.8 вам будет рекомендовано иное
средство.
     Проверить в программе, помечена ли на удаление текущая запись,
можно функцией Deleted(), возвращающей значение .T. для удаленных
записей. Сделать временно "невидимыми" помеченные на удаление записи
можно, выполнив команду SET DELETED ON. Обратное действие имеет
команда SET DELETED OFF. Исключением из правила является прямое
указание в некоторой команде номера записи: запись окажется доступна,
даже если помечена на удаление. Примеры: GO 5,  DISPLAY RECORD 7.
     Команда ZAP физически удаляет все записи активной БД, не удаляя
саму БД. Например, ее выполняют перед тем, как наполнить БД
новыми данными из некоторого источника, используя команду  APPEND
FROM (см. п.3.8). Такое радикальное обновление "кадровой" БД может
соответствовать полной замене персонала станции, вахтовой бригады,
воинского контингента и т.п.
     Задание 2.7. Откройте БД Kadr, добавьте в нее новые записи
(можно со случайными значениями полей), а затем удалите их.
Испытайте разные варианты работы: через меню, через команды.

                      ЗАКЛЮЧЕНИЕ КО 2-Й ГЛАВЕ

     Если вы научились создавать БД, изменять их структуру,
задавать упорядоченность и связи БД, получена основа для выполнения
вами учебных задач с использованием БД. Сохраняйтее созданные БД,
они могут потребоваться при выполнении заданий, упражнениях с
примерами из следующих глав.  В программах никогда не применяйте
команду USE с именем открытой ранее БД, пользуйтесь переключением
областей (команда SELECT), чтобы сделать БД вновь активной.
